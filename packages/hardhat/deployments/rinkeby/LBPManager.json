{
  "address": "0xAF3252153f65439a2c0065e43968A2E989985067",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract ILBPFactory",
              "name": "lbpFactory",
              "type": "address"
            },
            {
              "internalType": "contract IVault",
              "name": "vault",
              "type": "address"
            }
          ],
          "internalType": "struct LBPManager.Balancer",
          "name": "_balancer",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_startWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_endWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            }
          ],
          "internalType": "struct LBPManager.DAO",
          "name": "_dao",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "CreatedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolID",
          "type": "bytes32"
        }
      ],
      "name": "ExitedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolID",
          "type": "bytes32"
        }
      ],
      "name": "JoinedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapEnabled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balancer",
      "outputs": [
        {
          "internalType": "contract ILBPFactory",
          "name": "lbpFactory",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployLBP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lbp",
      "outputs": [
        {
          "internalType": "contract ILBP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolConfig",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "durationInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swapEnabledOnStart",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deployed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFromPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x822d0e1e4a0d6eb4325c663b9e990629d5f106972dd4604ada266de87143b886",
  "receipt": {
    "to": null,
    "from": "0x4a7a11D12805A7570bD1CB65E1Ca1396a0B1aF6F",
    "contractAddress": "0xAF3252153f65439a2c0065e43968A2E989985067",
    "transactionIndex": 7,
    "gasUsed": "1877667",
    "logsBloom": "0x
    "blockHash": "0x06f92cecaef4b5f527b1d6987c8e2589f29fa835e7f9641dd5aeceab25ecd181",
    "transactionHash": "0x822d0e1e4a0d6eb4325c663b9e990629d5f106972dd4604ada266de87143b886",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 9581374,
        "transactionHash": "0x822d0e1e4a0d6eb4325c663b9e990629d5f106972dd4604ada266de87143b886",
        "address": "0xcc763Df24B9b1d68194bA52e787B6760F04ffD72",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af3252153f65439a2c0065e43968a2e989985067",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x06f92cecaef4b5f527b1d6987c8e2589f29fa835e7f9641dd5aeceab25ecd181"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9581374,
        "transactionHash": "0x822d0e1e4a0d6eb4325c663b9e990629d5f106972dd4604ada266de87143b886",
        "address": "0x649D645d1Ee2CA89a798B52Bbf7B5a3C27093b94",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000af3252153f65439a2c0065e43968a2e989985067",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x06f92cecaef4b5f527b1d6987c8e2589f29fa835e7f9641dd5aeceab25ecd181"
      }
    ],
    "blockNumber": 9581374,
    "cumulativeGasUsed": "2297982",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "lbpFactory": "0xdcdbf71A870cc60C6F9B621E28a7D3Ffd6Dd4965",
      "vault": "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
    },
    "TPOP Liquidity Bootstrapping Pool",
    "TPOP_LBP",
    [
      "0xcc763df24b9b1d68194ba52e787b6760f04ffd72",
      "0x649D645d1Ee2CA89a798B52Bbf7B5a3C27093b94"
    ],
    [
      "13333330000000000000000",
      "5000000000"
    ],
    [
      "990000000000000000",
      "10000000000000000"
    ],
    [
      "500000000000000000",
      "500000000000000000"
    ],
    "15000000000000000",
    216000,
    1635981348,
    {
      "agent": "0x6d8bd5d37461788182131BaE19D03fF2B3c0687c",
      "treasury": "0x6d8bd5d37461788182131BaE19D03fF2B3c0687c"
    }
  ],
  "solcInputHash": "69bb44721f0394d6040365285be419e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract ILBPFactory\",\"name\":\"lbpFactory\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct LBPManager.Balancer\",\"name\":\"_balancer\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"internalType\":\"struct LBPManager.DAO\",\"name\":\"_dao\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"CreatedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"ExitedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolID\",\"type\":\"bytes32\"}],\"name\":\"JoinedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"contract ILBPFactory\",\"name\":\"lbpFactory\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployLBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lbp\",\"outputs\":[{\"internalType\":\"contract ILBP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolConfig\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"durationInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swapEnabledOnStart\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deployed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_balancer\":\"see struct Balancer - balancer contract addresses\",\"_dao\":\"see struct DAO - DAO addresses\",\"_durationInSeconds\":\"PoolConfiguration.durationInSeconds\",\"_endWeights\":\"PoolConfiguration.endWeights\",\"_name\":\"PoolConfiguration.name\",\"_startTime\":\"PoolConfiguration.startTime\",\"_startWeights\":\"PoolConfiguration.startWeights\",\"_swapFee\":\"PoolConfiguration.swapFee\",\"_symbol\":\"PoolConfiguration.symbol\",\"_tokenAmounts\":\"PoolConfiguration.tokenAmounts\",\"_tokens\":\"PoolConfiguration.tokens\"}},\"deployLBP()\":{\"details\":\"Will deploy a balancer LBP. Can only be called by DAO.agent address\"}},\"title\":\"LBP Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployLBP()\":{\"notice\":\"This function requires that the DAO.agent has approved this address for spending pool tokens (e.g. POP & USDC). It will revert if the DAO.agent has not approved this contract for spending those tokens. The PoolConfiguration.tokenAmounts for the pool tokens will be transferred from the DAO.agent to this contract and forwarded to the LBP\"},\"enableTrading()\":{\"notice\":\"Anyone can enable trading after the LBP has been deployed and the start time has been reached. Trading must be enabled for the pool to work.\"},\"lbp()\":{\"notice\":\"lbp deployed LBP address\"},\"withdrawFromPool()\":{\"notice\":\"The DAO.agent can call this function to shutdown and unwind the pool. The proceeds will be forwarded to the DAO.treasury\"}},\"notice\":\"This contract manages a Balancer Liquidity Bootstrapping Pool (LBP) so that only a DAO can deploy and shutdown an LBP. After the LBP is deployed, trading must be enabled. While only the DAO has permission to deploy, shutdown and unwind the LBP, anyone can permissionlessly enable trading after the configured start time. When the LBP is completed (via `withdrawFromPool()`), the total balance of the LBP tokens will be sent to the DAO treasury.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lbp/LBPManager.sol\":\"LBPManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/lbp/LBPManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ILBPFactory} from \\\"./interfaces/ILBPFactory.sol\\\";\\nimport {ILBP} from \\\"./interfaces/ILBP.sol\\\";\\nimport {IVault, JoinPoolRequest, IAsset, WeightedPoolExitKind, WeightedPoolJoinKind, ExitPoolRequest} from \\\"./interfaces/IVault.sol\\\";\\n\\n/**\\n * @title LBP Manager\\n * @notice This contract manages a Balancer Liquidity Bootstrapping Pool (LBP) so that only a DAO can deploy and shutdown an LBP. After the LBP is deployed, trading must be enabled. While only the DAO has permission to deploy, shutdown and unwind the LBP, anyone can permissionlessly enable trading after the configured start time. When the LBP is completed (via `withdrawFromPool()`), the total balance of the LBP tokens will be sent to the DAO treasury.\\n */\\ncontract LBPManager {\\n  /* ========== STRUCTS ========== */\\n\\n  /**\\n   * @title PoolConfiguration\\n   * @param name LBP pool token name\\n   * @param symbol LBP pool token symbol\\n   * @param tokens the token pairs for the LBP (e.g. POP & USDC)\\n   * @param tokenAmounts the token amounts for the pair that will be transferred from the dao agent to this contract\\n   * @param startWeights the starting weights for the token pairs, e.g. 99 * 10**16 / 1 * 10**16 [.99 ether / .01 ether]\\n   * @param endWeights the ending weights for the token pairs, e.g. 50 * 10**16 / 50 * 10**16 [.5 ether / .5 ether]\\n   * @param durationInSeconds how long the LBP should last in seconds. this determines how long it takes for the weights to reach the end weight\\n   * @param swapFee fee to charge per trade. this fee is collected as part of the LBP proceeds\\n   * @param owner address that is allowed to manage the LBP. it defaults to the deployed address of this contract\\n   * @param swapEnabledOnStart determines wether trading can commence after LBP is deployed. defaults to false\\n   * @param startTime the time that trading can commence for the LBP. the `enableTrading()` function will require that the start time is in the past before trading can be enabled\\n   * @param deployed boolean set when LBP is deployed\\n   */\\n  struct PoolConfiguration {\\n    string name;\\n    string symbol;\\n    IERC20[] tokens;\\n    uint256[] tokenAmounts;\\n    uint256[] startWeights;\\n    uint256[] endWeights;\\n    uint256 durationInSeconds;\\n    uint256 swapFee;\\n    address owner;\\n    bool swapEnabledOnStart;\\n    uint256 startTime;\\n    bool deployed;\\n  }\\n\\n  /**\\n   * @title Balancer\\n   * @dev addresses to deployed balancer contracts\\n   * @param lbpFactory LiquidityBootstrapFactory address\\n   * @param vault Balancer Vault address\\n   */\\n  struct Balancer {\\n    ILBPFactory lbpFactory;\\n    IVault vault;\\n  }\\n\\n  /**\\n   * @title DAO\\n   * @dev DAO addresses\\n   * @param agent the dao address that can interact with the contract\\n   * @param treasury the dao treasury address where LBP proceeds will be sent\\n   */\\n  struct DAO {\\n    address agent;\\n    address treasury;\\n  }\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  /**\\n   * @notice lbp deployed LBP address\\n   */\\n  ILBP public lbp;\\n  Balancer public balancer;\\n  PoolConfiguration public poolConfig;\\n  DAO public dao;\\n\\n  /* ========== EVENTS ========== */\\n\\n  event SwapEnabled(bool enabled);\\n  event CreatedPool(address poolAddress);\\n  event JoinedPool(bytes32 poolID);\\n  event ExitedPool(bytes32 poolID);\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  /**\\n   * @param _balancer see struct Balancer - balancer contract addresses\\n   * @param _name PoolConfiguration.name\\n   * @param _symbol PoolConfiguration.symbol\\n   * @param _tokens PoolConfiguration.tokens\\n   * @param _tokenAmounts PoolConfiguration.tokenAmounts\\n   * @param _startWeights PoolConfiguration.startWeights\\n   * @param _endWeights PoolConfiguration.endWeights\\n   * @param _swapFee PoolConfiguration.swapFee\\n   * @param _durationInSeconds PoolConfiguration.durationInSeconds\\n   * @param _startTime PoolConfiguration.startTime\\n   * @param _dao see struct DAO - DAO addresses\\n   */\\n  constructor(\\n    Balancer memory _balancer,\\n    string memory _name,\\n    string memory _symbol,\\n    IERC20[] memory _tokens,\\n    uint256[] memory _tokenAmounts,\\n    uint256[] memory _startWeights,\\n    uint256[] memory _endWeights,\\n    uint256 _swapFee,\\n    uint256 _durationInSeconds,\\n    uint256 _startTime,\\n    DAO memory _dao\\n  ) {\\n    balancer = _balancer;\\n\\n    dao = _dao;\\n\\n    poolConfig = PoolConfiguration({\\n      name: _name,\\n      symbol: _symbol,\\n      tokens: _tokens,\\n      tokenAmounts: _tokenAmounts,\\n      startWeights: _startWeights,\\n      endWeights: _endWeights,\\n      durationInSeconds: _durationInSeconds,\\n      swapFee: _swapFee,\\n      owner: address(this),\\n      swapEnabledOnStart: false,\\n      startTime: _startTime,\\n      deployed: false\\n    });\\n\\n    _approveBalancerVaultAsSpender();\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * @dev Will deploy a balancer LBP. Can only be called by DAO.agent address\\n   * @notice This function requires that the DAO.agent has approved this address for spending pool tokens (e.g. POP & USDC). It will revert if the DAO.agent has not approved this contract for spending those tokens. The PoolConfiguration.tokenAmounts for the pool tokens will be transferred from the DAO.agent to this contract and forwarded to the LBP\\n   */\\n  function deployLBP() external {\\n    // require(msg.sender == dao.agent, \\\"Only DAO can call this\\\");\\n\\n    lbp = ILBP(\\n      balancer.lbpFactory.create(\\n        poolConfig.name,\\n        poolConfig.symbol,\\n        poolConfig.tokens,\\n        poolConfig.startWeights,\\n        poolConfig.swapFee,\\n        poolConfig.owner,\\n        poolConfig.swapEnabledOnStart\\n      )\\n    );\\n\\n    poolConfig.deployed = true;\\n\\n    emit CreatedPool(address(lbp));\\n\\n    _transferPoolTokensToSelf();\\n    _joinPool();\\n  }\\n\\n  /**\\n   * @notice Anyone can enable trading after the LBP has been deployed and the start time has been reached. Trading must be enabled for the pool to work.\\n   */\\n  function enableTrading() external {\\n    require(poolConfig.deployed, \\\"Pool has not been deployed yet\\\");\\n    require(poolConfig.startTime <= block.timestamp, \\\"Trading can not be enabled yet\\\");\\n\\n    uint256 endtime = block.timestamp + poolConfig.durationInSeconds;\\n\\n    lbp.updateWeightsGradually(block.timestamp, endtime, poolConfig.endWeights);\\n\\n    lbp.setSwapEnabled(true);\\n    emit SwapEnabled(true);\\n  }\\n\\n  /**\\n   * @notice The DAO.agent can call this function to shutdown and unwind the pool. The proceeds will be forwarded to the DAO.treasury\\n   */\\n  function withdrawFromPool() external {\\n    require(msg.sender == dao.agent, \\\"not today, buddy\\\");\\n    bytes32 poolId = lbp.getPoolId();\\n\\n    uint256[] memory minAmountsOut = new uint256[](poolConfig.tokens.length);\\n    for (uint256 i; i < poolConfig.tokens.length; i++) {\\n      minAmountsOut[i] = uint256(0);\\n    }\\n\\n    lbp.setSwapEnabled(false);\\n\\n    ExitPoolRequest memory request = ExitPoolRequest({\\n      assets: _convertERC20sToAssets(poolConfig.tokens),\\n      minAmountsOut: minAmountsOut,\\n      userData: abi.encode(uint256(WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT), _getLPTokenBalance(poolId)),\\n      toInternalBalance: false\\n    });\\n\\n    balancer.vault.exitPool(poolId, address(this), dao.treasury, request);\\n    emit ExitedPool(poolId);\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n  function _joinPool() internal {\\n    uint256[] memory maxAmountsIn = new uint256[](poolConfig.tokens.length);\\n    for (uint256 i; i < poolConfig.tokens.length; i++) {\\n      maxAmountsIn[i] = type(uint256).max;\\n    }\\n\\n    JoinPoolRequest memory request = JoinPoolRequest({\\n      assets: _convertERC20sToAssets(poolConfig.tokens),\\n      maxAmountsIn: maxAmountsIn,\\n      userData: abi.encode(uint256(WeightedPoolJoinKind.INIT), poolConfig.tokenAmounts),\\n      fromInternalBalance: false\\n    });\\n\\n    balancer.vault.joinPool(lbp.getPoolId(), address(this), address(this), request);\\n    emit JoinedPool(lbp.getPoolId());\\n  }\\n\\n  function _approveBalancerVaultAsSpender() internal {\\n    (IERC20 pop, IERC20 usdc) = _getPoolTokens();\\n    pop.approve(address(balancer.vault), type(uint256).max);\\n    usdc.approve(address(balancer.vault), type(uint256).max);\\n  }\\n\\n  function _getLPTokenBalance(bytes32 poolId) internal returns (uint256) {\\n    (address poolAddress, ) = balancer.vault.getPool(poolId);\\n    IERC20 poolToken = IERC20(poolAddress);\\n    return poolToken.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev This helper function is a fast and cheap way to convert between IERC20[] and IAsset[] types.\\n   */\\n  function _convertERC20sToAssets(IERC20[] memory tokens) internal pure returns (IAsset[] memory assets) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      assets := tokens\\n    }\\n  }\\n\\n  function _transferPoolTokensToSelf() internal {\\n    (IERC20 pop, IERC20 usdc) = _getPoolTokens();\\n\\n    pop.transferFrom(dao.agent, address(this), poolConfig.tokenAmounts[0]);\\n    usdc.transferFrom(dao.agent, address(this), poolConfig.tokenAmounts[1]);\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n  function _getPoolTokens() internal view returns (IERC20, IERC20) {\\n    return (poolConfig.tokens[0], poolConfig.tokens[1]);\\n  }\\n}\\n\",\"keccak256\":\"0xf710a3e808973468eb5a097d8718edc629fbc80eed82d8114e20db03781cbede\",\"license\":\"GPL-3.0\"},\"contracts/lbp/interfaces/ILBP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILBP {\\n  function setSwapEnabled(bool swapEnabled) external;\\n\\n  /**\\n   * @dev Schedule a gradual weight change, from the current weights to the given\\n   * endWeights, over startTime to endTime\\n   */\\n  function updateWeightsGradually(\\n    uint256 startTime,\\n    uint256 endTime,\\n    uint256[] memory endWeights\\n  ) external;\\n\\n  function getPoolId() external returns (bytes32 poolID);\\n}\\n\",\"keccak256\":\"0xa455d25ad4a7739e3c97566e5039fc24e2dd23bf783e5145627751f23cf103cc\",\"license\":\"MIT\"},\"contracts/lbp/interfaces/ILBPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILBPFactory {\\n  function create(\\n    string memory name,\\n    string memory symbol,\\n    IERC20[] memory tokens,\\n    uint256[] memory weights,\\n    uint256 swapFeePercentage,\\n    address owner,\\n    bool swapEnabledOnStart\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x7df84b6d0b4180da98e8fc2aff3fd33eb83df7f81c28f2ba673a426155aa860a\",\"license\":\"MIT\"},\"contracts/lbp/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n  // solhint-disable-previous-line no-empty-blocks\\n}\\n\\nenum PoolSpecialization {\\n  GENERAL,\\n  MINIMAL_SWAP_INFO,\\n  TWO_TOKEN\\n}\\n\\nenum WeightedPoolJoinKind {\\n  INIT,\\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT\\n}\\n\\nenum WeightedPoolExitKind {\\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\\n  MANAGEMENT_FEE_TOKENS_OUT\\n}\\n\\nstruct JoinPoolRequest {\\n  IAsset[] assets;\\n  uint256[] maxAmountsIn;\\n  bytes userData;\\n  bool fromInternalBalance;\\n}\\nstruct ExitPoolRequest {\\n  IAsset[] assets;\\n  uint256[] minAmountsOut;\\n  bytes userData;\\n  bool toInternalBalance;\\n}\\n\\ninterface IVault {\\n  function setPaused(bool paused) external;\\n\\n  function getPool(bytes32 poolId) external returns (address, PoolSpecialization);\\n\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest memory request\\n  ) external payable;\\n\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    ExitPoolRequest memory request\\n  ) external payable;\\n\\n  function getPoolTokens(bytes32 poolId)\\n    external\\n    returns (\\n      IERC20[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 maxBlockNumber\\n    );\\n}\\n\",\"keccak256\":\"0x173438d89cf2d8ea328f5be2622ebdd1a29ff5fd522df342ec718f3b5732817e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_balancer": "see struct Balancer - balancer contract addresses",
          "_dao": "see struct DAO - DAO addresses",
          "_durationInSeconds": "PoolConfiguration.durationInSeconds",
          "_endWeights": "PoolConfiguration.endWeights",
          "_name": "PoolConfiguration.name",
          "_startTime": "PoolConfiguration.startTime",
          "_startWeights": "PoolConfiguration.startWeights",
          "_swapFee": "PoolConfiguration.swapFee",
          "_symbol": "PoolConfiguration.symbol",
          "_tokenAmounts": "PoolConfiguration.tokenAmounts",
          "_tokens": "PoolConfiguration.tokens"
        }
      },
      "deployLBP()": {
        "details": "Will deploy a balancer LBP. Can only be called by DAO.agent address"
      }
    },
    "title": "LBP Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployLBP()": {
        "notice": "This function requires that the DAO.agent has approved this address for spending pool tokens (e.g. POP & USDC). It will revert if the DAO.agent has not approved this contract for spending those tokens. The PoolConfiguration.tokenAmounts for the pool tokens will be transferred from the DAO.agent to this contract and forwarded to the LBP"
      },
      "enableTrading()": {
        "notice": "Anyone can enable trading after the LBP has been deployed and the start time has been reached. Trading must be enabled for the pool to work."
      },
      "lbp()": {
        "notice": "lbp deployed LBP address"
      },
      "withdrawFromPool()": {
        "notice": "The DAO.agent can call this function to shutdown and unwind the pool. The proceeds will be forwarded to the DAO.treasury"
      }
    },
    "notice": "This contract manages a Balancer Liquidity Bootstrapping Pool (LBP) so that only a DAO can deploy and shutdown an LBP. After the LBP is deployed, trading must be enabled. While only the DAO has permission to deploy, shutdown and unwind the LBP, anyone can permissionlessly enable trading after the configured start time. When the LBP is completed (via `withdrawFromPool()`), the total balance of the LBP tokens will be sent to the DAO treasury.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "contracts/lbp/LBPManager.sol:LBPManager",
        "label": "lbp",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ILBP)1304"
      },
      {
        "astId": 756,
        "contract": "contracts/lbp/LBPManager.sol:LBPManager",
        "label": "balancer",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Balancer)744_storage"
      },
      {
        "astId": 759,
        "contract": "contracts/lbp/LBPManager.sol:LBPManager",
        "label": "poolConfig",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(PoolConfiguration)737_storage"
      },
      {
        "astId": 762,
        "contract": "contracts/lbp/LBPManager.sol:LBPManager",
        "label": "dao",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(DAO)749_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)623)dyn_storage": {
        "base": "t_contract(IERC20)623",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)623": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILBP)1304": {
        "encoding": "inplace",
        "label": "contract ILBP",
        "numberOfBytes": "20"
      },
      "t_contract(ILBPFactory)1331": {
        "encoding": "inplace",
        "label": "contract ILBPFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)1429": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Balancer)744_storage": {
        "encoding": "inplace",
        "label": "struct LBPManager.Balancer",
        "members": [
          {
            "astId": 740,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "lbpFactory",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ILBPFactory)1331"
          },
          {
            "astId": 743,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "vault",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IVault)1429"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DAO)749_storage": {
        "encoding": "inplace",
        "label": "struct LBPManager.DAO",
        "members": [
          {
            "astId": 746,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "agent",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 748,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "treasury",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolConfiguration)737_storage": {
        "encoding": "inplace",
        "label": "struct LBPManager.PoolConfiguration",
        "members": [
          {
            "astId": 709,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 711,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 715,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "tokens",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_contract(IERC20)623)dyn_storage"
          },
          {
            "astId": 718,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "tokenAmounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 721,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "startWeights",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 724,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "endWeights",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 726,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "durationInSeconds",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 728,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "swapFee",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 730,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "owner",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 732,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "swapEnabledOnStart",
            "offset": 20,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 734,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "startTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 736,
            "contract": "contracts/lbp/LBPManager.sol:LBPManager",
            "label": "deployed",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}