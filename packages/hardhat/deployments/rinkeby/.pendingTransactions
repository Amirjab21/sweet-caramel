{
  "0xa3731769ed148f22752694752886b57bd3662edb60ad7051c8daabe549b10383": {
    "decoded": {
      "from": "0x1a2D045380eE3Bff01a244882CefDb805Ade7267",
      "gasPrice": "2000000000",
      "gasLimit": "689245",
      "to": null,
      "value": "0",
      "nonce": 6,
      "data": "0x60806040523480156200001157600080fd5b5060405162000d0a38038062000d0a8339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610a8780620002836000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610177578063a9059cbb1461018a578063dd62ed3e1461019d576100c9565b8063395093511461014957806370a082311461015c57806395d89b411461016f576100c9565b806318160ddd116100b257806318160ddd1461010c57806323b872dd14610121578063313ce56714610134576100c9565b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101b0565b6040516100e391906106fd565b60405180910390f35b6100ff6100fa3660046106c9565b610242565b6040516100e391906106f2565b61011461025f565b6040516100e391906109db565b6100ff61012f36600461068e565b610265565b61013c6102fe565b6040516100e391906109e4565b6100ff6101573660046106c9565b610303565b61011461016a36600461063b565b610357565b6100d6610376565b6100ff6101853660046106c9565b610385565b6100ff6101983660046106c9565b6103fe565b6101146101ab36600461065c565b610412565b6060600380546101bf90610a16565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb90610a16565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905090565b600061025661024f61043d565b8484610441565b50600192915050565b60025490565b60006102728484846104f5565b6001600160a01b03841660009081526001602052604081208161029361043d565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102df5760405162461bcd60e51b81526004016102d690610867565b60405180910390fd5b6102f3856102eb61043d565b858403610441565b506001949350505050565b601290565b600061025661031061043d565b84846001600061031e61043d565b6001600160a01b03908116825260208083019390935260409182016000908120918b168152925290205461035291906109f2565b610441565b6001600160a01b0381166000908152602081905260409020545b919050565b6060600480546101bf90610a16565b6000806001600061039461043d565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103e05760405162461bcd60e51b81526004016102d69061097e565b6103f46103eb61043d565b85858403610441565b5060019392505050565b600061025661040b61043d565b84846104f5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166104675760405162461bcd60e51b81526004016102d690610921565b6001600160a01b03821661048d5760405162461bcd60e51b81526004016102d6906107ad565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e89085906109db565b60405180910390a3505050565b6001600160a01b03831661051b5760405162461bcd60e51b81526004016102d6906108c4565b6001600160a01b0382166105415760405162461bcd60e51b81526004016102d690610750565b61054c83838361061f565b6001600160a01b038316600090815260208190526040902054818110156105855760405162461bcd60e51b81526004016102d69061080a565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105bc9084906109f2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161060691906109db565b60405180910390a361061984848461061f565b50505050565b505050565b80356001600160a01b038116811461037157600080fd5b60006020828403121561064c578081fd5b61065582610624565b9392505050565b6000806040838503121561066e578081fd5b61067783610624565b915061068560208401610624565b90509250929050565b6000806000606084860312156106a2578081fd5b6106ab84610624565b92506106b960208501610624565b9150604084013590509250925092565b600080604083850312156106db578182fd5b6106e483610624565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b818110156107295785810183015185820160400152820161070d565b8181111561073a5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260408201527f616c616e63650000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160408201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760408201527f207a65726f000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60ff91909116815260200190565b60008219821115610a1157634e487b7160e01b81526011600452602481fd5b500190565b600281046001821680610a2a57607f821691505b60208210811415610a4b57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212206143553d7c05bafe29495cf2bcd98322a40954482dca44c7b69864a06c0c6d9964736f6c6343000800003300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b546872656520437572766500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043343525600000000000000000000000000000000000000000000000000000000",
      "r": "0x5e614c3d581b35b296ad433c67e38be20ff74184a3474258ab21818bd806d174",
      "s": "0x6ffaa66d6124f4e1b8e2118700fce4ae26d32d09a4a36cb0d7f3861b993b5f5e",
      "v": 44,
      "chainId": 4
    }
  },
  "0x6b65d24114bd3fc6809cbe01c876c837dc769a536c7775d2a5c09e488e3582e3": {
    "name": "popEthLPStaking",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "StakingRewards",
      "sourceName": "contracts/core/utils/StakingRewards.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IERC20",
              "name": "_rewardsToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "_stakingToken",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Recovered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "RewardAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "RewardPaid",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newDuration",
              "type": "uint256"
            }
          ],
          "name": "RewardsDurationUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Staked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Withdrawn",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "earned",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "exit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getReward",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getRewardForDuration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastTimeRewardApplicable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastUpdateTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "notifyRewardAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "periodFinish",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "recoverERC20",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardPerToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardPerTokenStored",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "rewards",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardsDuration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardsToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_rewardsDuration",
              "type": "uint256"
            }
          ],
          "name": "setRewardsDuration",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "stake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stakingToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "userRewardPerTokenPaid",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526000600455600060055562093a806006553480156200002257600080fd5b50604051620016da380380620016da833981016040819052620000459162000109565b620000596200005362000098565b6200009c565b60018055600280546001600160a81b0319166101006001600160a01b0394851602179055600380546001600160a01b0319169190921617905562000140565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b600080604083850312156200011c578182fd5b6200012783620000ec565b91506200013760208401620000ec565b90509250929050565b61158a80620001506000396000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c806380faa57d116100ee578063cc1a378f11610097578063df136d6511610071578063df136d65146102f7578063e9fad8ee146102ff578063ebe2b12b14610307578063f2fde38b1461030f576101ad565b8063cc1a378f146102d4578063cd3daf9d146102e7578063d1af0c7d146102ef576101ad565b80638da5cb5b116100c85780638da5cb5b146102b1578063a694fc3a146102b9578063c8f33c91146102cc576101ad565b806380faa57d146102835780638980f11f1461028b5780638b8763471461029e576101ad565b80633c6b16ab1161015b57806370a082311161013557806370a082311461024b578063715018a61461025e57806372f702f3146102665780637b0a47ee1461027b576101ad565b80633c6b16ab1461021b5780633d18b9121461022e5780635c975abb14610236576101ad565b80631c1f78eb1161018c5780631c1f78eb146101f65780632e1a7d4d146101fe578063386a952514610213576101ad565b80628cc262146101b25780630700037d146101db57806318160ddd146101ee575b600080fd5b6101c56101c0366004610fe7565b610322565b6040516101d2919061149b565b60405180910390f35b6101c56101e9366004610fe7565b6103a2565b6101c56103b4565b6101c56103bb565b61021161020c36600461104a565b6103d9565b005b6101c5610524565b61021161022936600461104a565b61052a565b610211610751565b61023e610858565b6040516101d291906110e7565b6101c5610259366004610fe7565b610861565b61021161087c565b61026e6108c7565b6040516101d29190611096565b6101c56108d6565b6101c56108dc565b610211610299366004611001565b6108f4565b6101c56102ac366004610fe7565b6109ba565b61026e6109cc565b6102116102c736600461104a565b6109db565b6101c5610b33565b6102116102e236600461104a565b610b39565b6101c5610bd9565b61026e610c27565b6101c5610c3b565b610211610c41565b6101c5610c62565b61021161031d366004610fe7565b610c68565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461039a919061039490670de0b6b3a76400009061038e9061036f90610369610bd9565b90610cd9565b6001600160a01b0388166000908152600c602052604090205490610cec565b90610cf8565b90610d04565b90505b919050565b600a6020526000908152604090205481565b600b545b90565b60006103d4600654600554610cec90919063ffffffff16565b905090565b600260015414156104055760405162461bcd60e51b81526004016103fc90611407565b60405180910390fd5b600260015533610413610bd9565b60085561041e6108dc565b6007556001600160a01b038116156104655761043981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116104855760405162461bcd60e51b81526004016103fc906112d0565b600b546104929083610cd9565b600b55336000908152600c60205260409020546104af9083610cd9565b336000818152600c60205260409020919091556003546104db916001600160a01b039091169084610d10565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610514919061149b565b60405180910390a2505060018055565b60065481565b610532610d98565b6001600160a01b03166105436109cc565b6001600160a01b0316146105695760405162461bcd60e51b81526004016103fc90611307565b6000610573610bd9565b60085561057e6108dc565b6007556001600160a01b038116156105c55761059981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106105e4576006546105dc908390610cf8565b600555610627565b6004546000906105f49042610cd9565b9050600061060d60055483610cec90919063ffffffff16565b6006549091506106219061038e8684610d04565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610676903090600401611096565b60206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611062565b90506106dd60065482610cf890919063ffffffff16565b60055411156106fe5760405162461bcd60e51b81526004016103fc9061133c565b4260078190556006546107119190610d04565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061074490859061149b565b60405180910390a1505050565b600260015414156107745760405162461bcd60e51b81526004016103fc90611407565b600260015533610782610bd9565b60085561078d6108dc565b6007556001600160a01b038116156107d4576107a881610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a6020526040902054801561085057336000818152600a6020526040812055600254610817916101009091046001600160a01b03169083610d10565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610514919061149b565b505060018055565b60025460ff1690565b6001600160a01b03166000908152600c602052604090205490565b610884610d98565b6001600160a01b03166108956109cc565b6001600160a01b0316146108bb5760405162461bcd60e51b81526004016103fc90611307565b6108c56000610d9c565b565b6003546001600160a01b031681565b60055481565b600060045442106108ef576004546103d4565b504290565b6108fc610d98565b6001600160a01b031661090d6109cc565b6001600160a01b0316146109335760405162461bcd60e51b81526004016103fc90611307565b6003546001600160a01b03838116911614156109615760405162461bcd60e51b81526004016103fc9061143e565b61097d61096c6109cc565b6001600160a01b0384169083610d10565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109ae9291906110ce565b60405180910390a15050565b60096020526000908152604090205481565b6000546001600160a01b031690565b600260015414156109fe5760405162461bcd60e51b81526004016103fc90611407565b6002600155610a0b610858565b15610a285760405162461bcd60e51b81526004016103fc90611299565b33610a31610bd9565b600855610a3c6108dc565b6007556001600160a01b03811615610a8357610a5781610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610aa35760405162461bcd60e51b81526004016103fc90611205565b600b54610ab09083610d04565b600b55336000908152600c6020526040902054610acd9083610d04565b336000818152600c6020526040902091909155600354610afa916001600160a01b03909116903085610e04565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610514919061149b565b60075481565b610b41610d98565b6001600160a01b0316610b526109cc565b6001600160a01b031614610b785760405162461bcd60e51b81526004016103fc90611307565b6004544211610b995760405162461bcd60e51b81526004016103fc90611125565b60068190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610bce90839061149b565b60405180910390a150565b6000600b5460001415610bef57506008546103b8565b6103d4610c1e600b5461038e670de0b6b3a7640000610c18600554610c186007546103696108dc565b90610cec565b60085490610d04565b60025461010090046001600160a01b031681565b60085481565b336000908152600c6020526040902054610c5a906103d9565b6108c5610751565b60045481565b610c70610d98565b6001600160a01b0316610c816109cc565b6001600160a01b031614610ca75760405162461bcd60e51b81526004016103fc90611307565b6001600160a01b038116610ccd5760405162461bcd60e51b81526004016103fc906111a8565b610cd681610d9c565b50565b6000610ce582846114fb565b9392505050565b6000610ce582846114dc565b6000610ce582846114bc565b6000610ce582846114a4565b610d938363a9059cbb60e01b8484604051602401610d2f9291906110ce565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e2b565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e25846323b872dd60e01b858585604051602401610d2f939291906110aa565b50505050565b6000610e80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eba9092919063ffffffff16565b805190915015610d935780806020019051810190610e9e919061102a565b610d935760405162461bcd60e51b81526004016103fc906113aa565b6060610ec98484600085610ed1565b949350505050565b606082471015610ef35760405162461bcd60e51b81526004016103fc9061123c565b610efc85610f91565b610f185760405162461bcd60e51b81526004016103fc90611373565b600080866001600160a01b03168587604051610f34919061107a565b60006040518083038185875af1925050503d8060008114610f71576040519150601f19603f3d011682016040523d82523d6000602084013e610f76565b606091505b5091509150610f86828286610f97565b979650505050505050565b3b151590565b60608315610fa6575081610ce5565b825115610fb65782518084602001fd5b8160405162461bcd60e51b81526004016103fc91906110f2565b80356001600160a01b038116811461039d57600080fd5b600060208284031215610ff8578081fd5b610ce582610fd0565b60008060408385031215611013578081fd5b61101c83610fd0565b946020939093013593505050565b60006020828403121561103b578081fd5b81518015158114610ce5578182fd5b60006020828403121561105b578081fd5b5035919050565b600060208284031215611073578081fd5b5051919050565b6000825161108c818460208701611512565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611111816040850160208701611512565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156114b7576114b761153e565b500190565b6000826114d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114f6576114f661153e565b500290565b60008282101561150d5761150d61153e565b500390565b60005b8381101561152d578181015183820152602001611515565b83811115610e255750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122024514ffbbea37ab62ec37df7251b63441e7a3cdde353f9b433840ea2cd1d379064736f6c63430008000033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ad5760003560e01c806380faa57d116100ee578063cc1a378f11610097578063df136d6511610071578063df136d65146102f7578063e9fad8ee146102ff578063ebe2b12b14610307578063f2fde38b1461030f576101ad565b8063cc1a378f146102d4578063cd3daf9d146102e7578063d1af0c7d146102ef576101ad565b80638da5cb5b116100c85780638da5cb5b146102b1578063a694fc3a146102b9578063c8f33c91146102cc576101ad565b806380faa57d146102835780638980f11f1461028b5780638b8763471461029e576101ad565b80633c6b16ab1161015b57806370a082311161013557806370a082311461024b578063715018a61461025e57806372f702f3146102665780637b0a47ee1461027b576101ad565b80633c6b16ab1461021b5780633d18b9121461022e5780635c975abb14610236576101ad565b80631c1f78eb1161018c5780631c1f78eb146101f65780632e1a7d4d146101fe578063386a952514610213576101ad565b80628cc262146101b25780630700037d146101db57806318160ddd146101ee575b600080fd5b6101c56101c0366004610fe7565b610322565b6040516101d2919061149b565b60405180910390f35b6101c56101e9366004610fe7565b6103a2565b6101c56103b4565b6101c56103bb565b61021161020c36600461104a565b6103d9565b005b6101c5610524565b61021161022936600461104a565b61052a565b610211610751565b61023e610858565b6040516101d291906110e7565b6101c5610259366004610fe7565b610861565b61021161087c565b61026e6108c7565b6040516101d29190611096565b6101c56108d6565b6101c56108dc565b610211610299366004611001565b6108f4565b6101c56102ac366004610fe7565b6109ba565b61026e6109cc565b6102116102c736600461104a565b6109db565b6101c5610b33565b6102116102e236600461104a565b610b39565b6101c5610bd9565b61026e610c27565b6101c5610c3b565b610211610c41565b6101c5610c62565b61021161031d366004610fe7565b610c68565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461039a919061039490670de0b6b3a76400009061038e9061036f90610369610bd9565b90610cd9565b6001600160a01b0388166000908152600c602052604090205490610cec565b90610cf8565b90610d04565b90505b919050565b600a6020526000908152604090205481565b600b545b90565b60006103d4600654600554610cec90919063ffffffff16565b905090565b600260015414156104055760405162461bcd60e51b81526004016103fc90611407565b60405180910390fd5b600260015533610413610bd9565b60085561041e6108dc565b6007556001600160a01b038116156104655761043981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116104855760405162461bcd60e51b81526004016103fc906112d0565b600b546104929083610cd9565b600b55336000908152600c60205260409020546104af9083610cd9565b336000818152600c60205260409020919091556003546104db916001600160a01b039091169084610d10565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610514919061149b565b60405180910390a2505060018055565b60065481565b610532610d98565b6001600160a01b03166105436109cc565b6001600160a01b0316146105695760405162461bcd60e51b81526004016103fc90611307565b6000610573610bd9565b60085561057e6108dc565b6007556001600160a01b038116156105c55761059981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106105e4576006546105dc908390610cf8565b600555610627565b6004546000906105f49042610cd9565b9050600061060d60055483610cec90919063ffffffff16565b6006549091506106219061038e8684610d04565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610676903090600401611096565b60206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611062565b90506106dd60065482610cf890919063ffffffff16565b60055411156106fe5760405162461bcd60e51b81526004016103fc9061133c565b4260078190556006546107119190610d04565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061074490859061149b565b60405180910390a1505050565b600260015414156107745760405162461bcd60e51b81526004016103fc90611407565b600260015533610782610bd9565b60085561078d6108dc565b6007556001600160a01b038116156107d4576107a881610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a6020526040902054801561085057336000818152600a6020526040812055600254610817916101009091046001600160a01b03169083610d10565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610514919061149b565b505060018055565b60025460ff1690565b6001600160a01b03166000908152600c602052604090205490565b610884610d98565b6001600160a01b03166108956109cc565b6001600160a01b0316146108bb5760405162461bcd60e51b81526004016103fc90611307565b6108c56000610d9c565b565b6003546001600160a01b031681565b60055481565b600060045442106108ef576004546103d4565b504290565b6108fc610d98565b6001600160a01b031661090d6109cc565b6001600160a01b0316146109335760405162461bcd60e51b81526004016103fc90611307565b6003546001600160a01b03838116911614156109615760405162461bcd60e51b81526004016103fc9061143e565b61097d61096c6109cc565b6001600160a01b0384169083610d10565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109ae9291906110ce565b60405180910390a15050565b60096020526000908152604090205481565b6000546001600160a01b031690565b600260015414156109fe5760405162461bcd60e51b81526004016103fc90611407565b6002600155610a0b610858565b15610a285760405162461bcd60e51b81526004016103fc90611299565b33610a31610bd9565b600855610a3c6108dc565b6007556001600160a01b03811615610a8357610a5781610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610aa35760405162461bcd60e51b81526004016103fc90611205565b600b54610ab09083610d04565b600b55336000908152600c6020526040902054610acd9083610d04565b336000818152600c6020526040902091909155600354610afa916001600160a01b03909116903085610e04565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610514919061149b565b60075481565b610b41610d98565b6001600160a01b0316610b526109cc565b6001600160a01b031614610b785760405162461bcd60e51b81526004016103fc90611307565b6004544211610b995760405162461bcd60e51b81526004016103fc90611125565b60068190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610bce90839061149b565b60405180910390a150565b6000600b5460001415610bef57506008546103b8565b6103d4610c1e600b5461038e670de0b6b3a7640000610c18600554610c186007546103696108dc565b90610cec565b60085490610d04565b60025461010090046001600160a01b031681565b60085481565b336000908152600c6020526040902054610c5a906103d9565b6108c5610751565b60045481565b610c70610d98565b6001600160a01b0316610c816109cc565b6001600160a01b031614610ca75760405162461bcd60e51b81526004016103fc90611307565b6001600160a01b038116610ccd5760405162461bcd60e51b81526004016103fc906111a8565b610cd681610d9c565b50565b6000610ce582846114fb565b9392505050565b6000610ce582846114dc565b6000610ce582846114bc565b6000610ce582846114a4565b610d938363a9059cbb60e01b8484604051602401610d2f9291906110ce565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e2b565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e25846323b872dd60e01b858585604051602401610d2f939291906110aa565b50505050565b6000610e80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eba9092919063ffffffff16565b805190915015610d935780806020019051810190610e9e919061102a565b610d935760405162461bcd60e51b81526004016103fc906113aa565b6060610ec98484600085610ed1565b949350505050565b606082471015610ef35760405162461bcd60e51b81526004016103fc9061123c565b610efc85610f91565b610f185760405162461bcd60e51b81526004016103fc90611373565b600080866001600160a01b03168587604051610f34919061107a565b60006040518083038185875af1925050503d8060008114610f71576040519150601f19603f3d011682016040523d82523d6000602084013e610f76565b606091505b5091509150610f86828286610f97565b979650505050505050565b3b151590565b60608315610fa6575081610ce5565b825115610fb65782518084602001fd5b8160405162461bcd60e51b81526004016103fc91906110f2565b80356001600160a01b038116811461039d57600080fd5b600060208284031215610ff8578081fd5b610ce582610fd0565b60008060408385031215611013578081fd5b61101c83610fd0565b946020939093013593505050565b60006020828403121561103b578081fd5b81518015158114610ce5578182fd5b60006020828403121561105b578081fd5b5035919050565b600060208284031215611073578081fd5b5051919050565b6000825161108c818460208701611512565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611111816040850160208701611512565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156114b7576114b761153e565b500190565b6000826114d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114f6576114f661153e565b500290565b60008282101561150d5761150d61153e565b500390565b60005b8381101561152d578181015183820152602001611515565b83811115610e255750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122024514ffbbea37ab62ec37df7251b63441e7a3cdde353f9b433840ea2cd1d379064736f6c63430008000033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:526:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "73:117:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "83:22:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "98:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "92:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "92:13:22"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "83:5:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "168:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "177:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "180:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "170:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "170:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "170:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "127:5:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "138:5:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "153:3:22",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "158:1:22",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "149:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "149:11:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "162:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "145:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "145:19:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "134:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "134:31:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "124:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "124:42:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "117:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "117:50:22"
                          },
                          "nodeType": "YulIf",
                          "src": "114:2:22"
                        }
                      ]
                    },
                    "name": "abi_decode_IERC20_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "52:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "63:5:22",
                        "type": ""
                      }
                    ],
                    "src": "14:176:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "321:203:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "367:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "376:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "384:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "369:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "369:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "342:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "351:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "338:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "338:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "363:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "334:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "334:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "331:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "402:49:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "441:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_IERC20_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "412:28:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "412:39:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "402:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "460:58:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "503:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "514:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "499:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "499:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_IERC20_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "470:28:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "470:48:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "460:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IERC20_$859t_contract$_IERC20_$859_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "279:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "290:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "302:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "310:6:22",
                        "type": ""
                      }
                    ],
                    "src": "195:329:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_IERC20_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$859t_contract$_IERC20_$859_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_IERC20_fromMemory(headStart)\n        value1 := abi_decode_IERC20_fromMemory(add(headStart, 32))\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040526000600455600060055562093a806006553480156200002257600080fd5b50604051620016da380380620016da833981016040819052620000459162000109565b620000596200005362000098565b6200009c565b60018055600280546001600160a81b0319166101006001600160a01b0394851602179055600380546001600160a01b0319169190921617905562000140565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b600080604083850312156200011c578182fd5b6200012783620000ec565b91506200013760208401620000ec565b90509250929050565b61158a80620001506000396000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c806380faa57d116100ee578063cc1a378f11610097578063df136d6511610071578063df136d65146102f7578063e9fad8ee146102ff578063ebe2b12b14610307578063f2fde38b1461030f576101ad565b8063cc1a378f146102d4578063cd3daf9d146102e7578063d1af0c7d146102ef576101ad565b80638da5cb5b116100c85780638da5cb5b146102b1578063a694fc3a146102b9578063c8f33c91146102cc576101ad565b806380faa57d146102835780638980f11f1461028b5780638b8763471461029e576101ad565b80633c6b16ab1161015b57806370a082311161013557806370a082311461024b578063715018a61461025e57806372f702f3146102665780637b0a47ee1461027b576101ad565b80633c6b16ab1461021b5780633d18b9121461022e5780635c975abb14610236576101ad565b80631c1f78eb1161018c5780631c1f78eb146101f65780632e1a7d4d146101fe578063386a952514610213576101ad565b80628cc262146101b25780630700037d146101db57806318160ddd146101ee575b600080fd5b6101c56101c0366004610fe7565b610322565b6040516101d2919061149b565b60405180910390f35b6101c56101e9366004610fe7565b6103a2565b6101c56103b4565b6101c56103bb565b61021161020c36600461104a565b6103d9565b005b6101c5610524565b61021161022936600461104a565b61052a565b610211610751565b61023e610858565b6040516101d291906110e7565b6101c5610259366004610fe7565b610861565b61021161087c565b61026e6108c7565b6040516101d29190611096565b6101c56108d6565b6101c56108dc565b610211610299366004611001565b6108f4565b6101c56102ac366004610fe7565b6109ba565b61026e6109cc565b6102116102c736600461104a565b6109db565b6101c5610b33565b6102116102e236600461104a565b610b39565b6101c5610bd9565b61026e610c27565b6101c5610c3b565b610211610c41565b6101c5610c62565b61021161031d366004610fe7565b610c68565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461039a919061039490670de0b6b3a76400009061038e9061036f90610369610bd9565b90610cd9565b6001600160a01b0388166000908152600c602052604090205490610cec565b90610cf8565b90610d04565b90505b919050565b600a6020526000908152604090205481565b600b545b90565b60006103d4600654600554610cec90919063ffffffff16565b905090565b600260015414156104055760405162461bcd60e51b81526004016103fc90611407565b60405180910390fd5b600260015533610413610bd9565b60085561041e6108dc565b6007556001600160a01b038116156104655761043981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116104855760405162461bcd60e51b81526004016103fc906112d0565b600b546104929083610cd9565b600b55336000908152600c60205260409020546104af9083610cd9565b336000818152600c60205260409020919091556003546104db916001600160a01b039091169084610d10565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610514919061149b565b60405180910390a2505060018055565b60065481565b610532610d98565b6001600160a01b03166105436109cc565b6001600160a01b0316146105695760405162461bcd60e51b81526004016103fc90611307565b6000610573610bd9565b60085561057e6108dc565b6007556001600160a01b038116156105c55761059981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106105e4576006546105dc908390610cf8565b600555610627565b6004546000906105f49042610cd9565b9050600061060d60055483610cec90919063ffffffff16565b6006549091506106219061038e8684610d04565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610676903090600401611096565b60206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611062565b90506106dd60065482610cf890919063ffffffff16565b60055411156106fe5760405162461bcd60e51b81526004016103fc9061133c565b4260078190556006546107119190610d04565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061074490859061149b565b60405180910390a1505050565b600260015414156107745760405162461bcd60e51b81526004016103fc90611407565b600260015533610782610bd9565b60085561078d6108dc565b6007556001600160a01b038116156107d4576107a881610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a6020526040902054801561085057336000818152600a6020526040812055600254610817916101009091046001600160a01b03169083610d10565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610514919061149b565b505060018055565b60025460ff1690565b6001600160a01b03166000908152600c602052604090205490565b610884610d98565b6001600160a01b03166108956109cc565b6001600160a01b0316146108bb5760405162461bcd60e51b81526004016103fc90611307565b6108c56000610d9c565b565b6003546001600160a01b031681565b60055481565b600060045442106108ef576004546103d4565b504290565b6108fc610d98565b6001600160a01b031661090d6109cc565b6001600160a01b0316146109335760405162461bcd60e51b81526004016103fc90611307565b6003546001600160a01b03838116911614156109615760405162461bcd60e51b81526004016103fc9061143e565b61097d61096c6109cc565b6001600160a01b0384169083610d10565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109ae9291906110ce565b60405180910390a15050565b60096020526000908152604090205481565b6000546001600160a01b031690565b600260015414156109fe5760405162461bcd60e51b81526004016103fc90611407565b6002600155610a0b610858565b15610a285760405162461bcd60e51b81526004016103fc90611299565b33610a31610bd9565b600855610a3c6108dc565b6007556001600160a01b03811615610a8357610a5781610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610aa35760405162461bcd60e51b81526004016103fc90611205565b600b54610ab09083610d04565b600b55336000908152600c6020526040902054610acd9083610d04565b336000818152600c6020526040902091909155600354610afa916001600160a01b03909116903085610e04565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610514919061149b565b60075481565b610b41610d98565b6001600160a01b0316610b526109cc565b6001600160a01b031614610b785760405162461bcd60e51b81526004016103fc90611307565b6004544211610b995760405162461bcd60e51b81526004016103fc90611125565b60068190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610bce90839061149b565b60405180910390a150565b6000600b5460001415610bef57506008546103b8565b6103d4610c1e600b5461038e670de0b6b3a7640000610c18600554610c186007546103696108dc565b90610cec565b60085490610d04565b60025461010090046001600160a01b031681565b60085481565b336000908152600c6020526040902054610c5a906103d9565b6108c5610751565b60045481565b610c70610d98565b6001600160a01b0316610c816109cc565b6001600160a01b031614610ca75760405162461bcd60e51b81526004016103fc90611307565b6001600160a01b038116610ccd5760405162461bcd60e51b81526004016103fc906111a8565b610cd681610d9c565b50565b6000610ce582846114fb565b9392505050565b6000610ce582846114dc565b6000610ce582846114bc565b6000610ce582846114a4565b610d938363a9059cbb60e01b8484604051602401610d2f9291906110ce565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e2b565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e25846323b872dd60e01b858585604051602401610d2f939291906110aa565b50505050565b6000610e80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eba9092919063ffffffff16565b805190915015610d935780806020019051810190610e9e919061102a565b610d935760405162461bcd60e51b81526004016103fc906113aa565b6060610ec98484600085610ed1565b949350505050565b606082471015610ef35760405162461bcd60e51b81526004016103fc9061123c565b610efc85610f91565b610f185760405162461bcd60e51b81526004016103fc90611373565b600080866001600160a01b03168587604051610f34919061107a565b60006040518083038185875af1925050503d8060008114610f71576040519150601f19603f3d011682016040523d82523d6000602084013e610f76565b606091505b5091509150610f86828286610f97565b979650505050505050565b3b151590565b60608315610fa6575081610ce5565b825115610fb65782518084602001fd5b8160405162461bcd60e51b81526004016103fc91906110f2565b80356001600160a01b038116811461039d57600080fd5b600060208284031215610ff8578081fd5b610ce582610fd0565b60008060408385031215611013578081fd5b61101c83610fd0565b946020939093013593505050565b60006020828403121561103b578081fd5b81518015158114610ce5578182fd5b60006020828403121561105b578081fd5b5035919050565b600060208284031215611073578081fd5b5051919050565b6000825161108c818460208701611512565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611111816040850160208701611512565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156114b7576114b761153e565b500190565b6000826114d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114f6576114f661153e565b500290565b60008282101561150d5761150d61153e565b500390565b60005b8381101561152d578181015183820152602001611515565b83811115610e255750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122024514ffbbea37ab62ec37df7251b63441e7a3cdde353f9b433840ea2cd1d379064736f6c63430008000033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x4 SSTORE PUSH1 0x0 PUSH1 0x5 SSTORE PUSH3 0x93A80 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x16DA CODESIZE SUB DUP1 PUSH3 0x16DA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x45 SWAP2 PUSH3 0x109 JUMP JUMPDEST PUSH3 0x59 PUSH3 0x53 PUSH3 0x98 JUMP JUMPDEST PUSH3 0x9C JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND MUL OR SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH3 0x140 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x11C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH3 0x127 DUP4 PUSH3 0xEC JUMP JUMPDEST SWAP2 POP PUSH3 0x137 PUSH1 0x20 DUP5 ADD PUSH3 0xEC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x158A DUP1 PUSH3 0x150 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80FAA57D GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xCC1A378F GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDF136D65 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xE9FAD8EE EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x30F JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0xCC1A378F EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x2EF JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x2CC JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x8980F11F EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x29E JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x27B JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x3D18B912 EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x236 JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x1C1F78EB GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x213 JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1EE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x322 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x3A2 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x3B4 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH2 0x524 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x229 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH2 0x211 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x858 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x861 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x87C JUMP JUMPDEST PUSH2 0x26E PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1096 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x8D6 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x211 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0x8F4 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x2AC CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x26E PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x211 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x9DB JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0xB39 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xBD9 JUMP JUMPDEST PUSH2 0x26E PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x211 PUSH2 0xC41 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xC62 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH2 0x39A SWAP2 SWAP1 PUSH2 0x394 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x38E SWAP1 PUSH2 0x36F SWAP1 PUSH2 0x369 PUSH2 0xBD9 JUMP JUMPDEST SWAP1 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0xCEC JUMP JUMPDEST SWAP1 PUSH2 0xCF8 JUMP JUMPDEST SWAP1 PUSH2 0xD04 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0xCEC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE CALLER PUSH2 0x413 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x41E PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x465 JUMPI PUSH2 0x439 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x485 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x492 SWAP1 DUP4 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0xB SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4AF SWAP1 DUP4 PUSH2 0xCD9 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x3 SLOAD PUSH2 0x4DB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 PUSH2 0xD10 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x532 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x543 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x569 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x573 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x57E PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x5C5 JUMPI PUSH2 0x599 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0x5E4 JUMPI PUSH1 0x6 SLOAD PUSH2 0x5DC SWAP1 DUP4 SWAP1 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH2 0x627 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x5F4 SWAP1 TIMESTAMP PUSH2 0xCD9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x60D PUSH1 0x5 SLOAD DUP4 PUSH2 0xCEC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP2 POP PUSH2 0x621 SWAP1 PUSH2 0x38E DUP7 DUP5 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x5 SSTORE POP POP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x676 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP1 POP PUSH2 0x6DD PUSH1 0x6 SLOAD DUP3 PUSH2 0xCF8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 SLOAD GT ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x133C JUMP JUMPDEST TIMESTAMP PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x6 SLOAD PUSH2 0x711 SWAP2 SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D SWAP1 PUSH2 0x744 SWAP1 DUP6 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE CALLER PUSH2 0x782 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x78D PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x7D4 JUMPI PUSH2 0x7A8 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x850 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x817 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 PUSH2 0xD10 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 DUP3 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x884 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x895 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x8C5 PUSH1 0x0 PUSH2 0xD9C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0x8EF JUMPI PUSH1 0x4 SLOAD PUSH2 0x3D4 JUMP JUMPDEST POP TIMESTAMP SWAP1 JUMP JUMPDEST PUSH2 0x8FC PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x90D PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x933 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH2 0x97D PUSH2 0x96C PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 PUSH2 0xD10 JUMP JUMPDEST PUSH32 0x8C1256B8896378CD5044F80C202F9772B9D77DC85C8A6EB51967210B09BFAA28 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9AE SWAP3 SWAP2 SWAP1 PUSH2 0x10CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x9FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xA0B PUSH2 0x858 JUMP JUMPDEST ISZERO PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1299 JUMP JUMPDEST CALLER PUSH2 0xA31 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xA3C PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA83 JUMPI PUSH2 0xA57 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0xAA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1205 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0xAB0 SWAP1 DUP4 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0xB SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xACD SWAP1 DUP4 PUSH2 0xD04 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x3 SLOAD PUSH2 0xAFA SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP6 PUSH2 0xE04 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP4 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB41 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB52 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP GT PUSH2 0xB99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1125 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFB46CA5A5E06D4540D6387B930A7C978BCE0DB5F449EC6B3F5D07C6E1D44F2D3 SWAP1 PUSH2 0xBCE SWAP1 DUP4 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xBEF JUMPI POP PUSH1 0x8 SLOAD PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0xC1E PUSH1 0xB SLOAD PUSH2 0x38E PUSH8 0xDE0B6B3A7640000 PUSH2 0xC18 PUSH1 0x5 SLOAD PUSH2 0xC18 PUSH1 0x7 SLOAD PUSH2 0x369 PUSH2 0x8DC JUMP JUMPDEST SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC5A SWAP1 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x8C5 PUSH2 0x751 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC70 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC81 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x11A8 JUMP JUMPDEST PUSH2 0xCD6 DUP2 PUSH2 0xD9C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14FB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14A4 JUMP JUMPDEST PUSH2 0xD93 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD2F SWAP3 SWAP2 SWAP1 PUSH2 0x10CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xE2B JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xE25 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEBA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD93 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE9E SWAP2 SWAP1 PUSH2 0x102A JUMP JUMPDEST PUSH2 0xD93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEC9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xED1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x123C JUMP JUMPDEST PUSH2 0xEFC DUP6 PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xF18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xF34 SWAP2 SWAP1 PUSH2 0x107A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xF86 DUP3 DUP3 DUP7 PUSH2 0xF97 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xFA6 JUMPI POP DUP2 PUSH2 0xCE5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xFB6 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x10F2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFF8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xCE5 DUP3 PUSH2 0xFD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1013 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x101C DUP4 PUSH2 0xFD0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCE5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x105B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1073 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x108C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1512 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1111 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1512 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x58 SWAP1 DUP3 ADD MSTORE PUSH32 0x50726576696F7573207265776172647320706572696F64206D75737420626520 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636F6D706C657465206265666F7265206368616E67696E672074686520647572 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6174696F6E20666F7220746865206E657720706572696F640000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420776974686472617720746865207374616B696E6720746F6B65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x14B7 JUMPI PUSH2 0x14B7 PUSH2 0x153E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14D7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x14F6 JUMPI PUSH2 0x14F6 PUSH2 0x153E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x150D JUMPI PUSH2 0x150D PUSH2 0x153E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1515 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE25 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 MLOAD 0x4F 0xFB 0xBE LOG3 PUSH27 0xB62EC37DF7251B63441E7A3CDDE353F9B433840EA2CD1D37906473 PUSH16 0x6C634300080000330000000000000000 ",
          "sourceMap": "495:5600:19:-:0;;;776:1;746:31;;809:1;781:29;;847:6;814:39;;1163:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;867:23:0;877:12;:10;:12::i;:::-;867:9;:23::i;:::-;1637:1:2;1742:22;;924:7:1;:15;;-1:-1:-1;;;;;;1225:28:19;924:15:1;-1:-1:-1;;;;;1225:28:19;;;;;;;1259:12;:28;;-1:-1:-1;;;;;;1259:28:19;;;;;;;;495:5600;;587:96:11;666:10;587:96;:::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;-1:-1:-1;;;;;;2131:17:0;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;14:176:22:-;92:13;;-1:-1:-1;;;;;134:31:22;;124:42;;114:2;;180:1;177;170:12;114:2;73:117;;;:::o;195:329::-;;;363:2;351:9;342:7;338:23;334:32;331:2;;;384:6;376;369:22;331:2;412:39;441:9;412:39;:::i;:::-;402:49;;470:48;514:2;503:9;499:18;470:48;:::i;:::-;460:58;;321:203;;;;;:::o;:::-;495:5600:19;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:9363:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "65:147:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "75:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "97:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "84:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "84:20:22"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "75:5:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "190:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "199:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "202:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "192:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "192:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "192:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "126:5:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "137:5:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "144:42:22",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "133:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "133:54:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "123:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "123:65:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "116:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "116:73:22"
                          },
                          "nodeType": "YulIf",
                          "src": "113:2:22"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "44:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "55:5:22",
                        "type": ""
                      }
                    ],
                    "src": "14:198:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "287:128:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "333:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "342:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "350:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "335:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "335:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "335:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "308:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "317:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "304:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "304:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "329:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "300:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "300:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "297:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "368:41:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "399:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "378:20:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "378:31:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "368:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "253:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "264:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "276:6:22",
                        "type": ""
                      }
                    ],
                    "src": "217:198:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "507:179:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "553:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "562:6:22"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "570:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "555:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "555:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "555:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "528:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "537:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "524:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "524:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "549:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "520:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "520:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "517:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "588:41:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "619:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "598:20:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "598:31:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "588:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "638:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "665:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "676:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "661:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "661:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "648:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "648:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "638:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "465:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "476:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "488:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "496:6:22",
                        "type": ""
                      }
                    ],
                    "src": "420:266:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "769:219:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "815:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "824:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "832:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "817:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "817:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "817:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "790:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "799:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "786:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "786:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "811:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "782:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "782:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "779:2:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "850:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "869:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "863:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "863:16:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "854:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "932:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "941:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "949:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "934:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "934:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "934:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "901:5:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "922:5:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "915:6:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "915:13:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "908:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "908:21:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "898:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "898:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "891:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "891:40:22"
                          },
                          "nodeType": "YulIf",
                          "src": "888:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "967:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "977:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "967:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "735:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "746:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "758:6:22",
                        "type": ""
                      }
                    ],
                    "src": "691:297:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1063:120:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1109:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1118:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1126:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1111:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1111:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1111:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1084:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1093:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1080:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1080:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1105:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1076:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1076:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1073:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1144:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1167:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1154:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1154:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1144:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1029:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1040:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1052:6:22",
                        "type": ""
                      }
                    ],
                    "src": "993:190:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1269:113:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1315:26:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1324:6:22"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1332:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1317:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1317:22:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1317:22:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1290:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1299:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1286:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1286:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1311:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1282:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1282:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1279:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1350:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1366:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1360:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1360:16:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1350:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1235:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1246:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1258:6:22",
                        "type": ""
                      }
                    ],
                    "src": "1188:194:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1524:137:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1534:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1554:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1548:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1548:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1538:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1596:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1604:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1592:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1592:17:22"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1611:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1616:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1570:21:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1570:53:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1570:53:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1632:23:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1643:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1648:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1639:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1639:16:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1632:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1500:3:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1505:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1516:3:22",
                        "type": ""
                      }
                    ],
                    "src": "1387:274:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1767:125:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1777:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1789:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1800:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1785:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1785:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1777:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1819:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1834:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1842:42:22",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1830:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1830:55:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1812:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1812:74:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1812:74:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1736:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1747:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1758:4:22",
                        "type": ""
                      }
                    ],
                    "src": "1666:226:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2054:241:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2064:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2076:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2087:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2072:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2072:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2064:4:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2099:52:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2109:42:22",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2103:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2167:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2182:6:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2190:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2178:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2178:15:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2160:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2160:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2160:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2214:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2225:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2210:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2210:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2234:6:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2242:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2230:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2230:15:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2203:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2203:43:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2203:43:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2266:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2277:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2262:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2262:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "2282:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2255:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2255:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2255:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2007:9:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2018:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2026:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2034:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2045:4:22",
                        "type": ""
                      }
                    ],
                    "src": "1897:398:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2429:168:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2439:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2451:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2462:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2447:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2447:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2439:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2481:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2496:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2504:42:22",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2492:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2492:55:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2474:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2474:74:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2474:74:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2568:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2579:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2564:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2564:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "2584:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2557:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2557:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2557:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2390:9:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2401:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2409:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2420:4:22",
                        "type": ""
                      }
                    ],
                    "src": "2300:297:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2697:92:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2707:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2719:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2730:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2715:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2715:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2707:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2749:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "2774:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2767:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2767:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "2760:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2760:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2742:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2742:41:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2742:41:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2666:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2677:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2688:4:22",
                        "type": ""
                      }
                    ],
                    "src": "2602:187:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2909:125:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2919:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2931:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2942:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2927:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2927:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2919:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2961:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2976:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2984:42:22",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2972:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2972:55:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2954:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2954:74:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2954:74:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC20_$859__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2878:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2889:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2900:4:22",
                        "type": ""
                      }
                    ],
                    "src": "2794:240:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3160:262:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3177:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3188:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3170:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3170:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3170:21:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3200:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3220:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3214:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3214:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3204:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3247:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3258:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3243:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3243:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3263:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3236:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3236:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3236:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3305:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3313:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3301:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3301:15:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3322:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3333:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3318:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3318:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3338:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3279:21:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3279:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3279:66:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3354:62:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3370:9:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3389:6:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3397:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3385:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3385:15:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3406:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3402:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3402:7:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3381:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3381:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3366:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3366:45:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3413:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3362:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3362:54:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3354:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3129:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3140:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3151:4:22",
                        "type": ""
                      }
                    ],
                    "src": "3039:383:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3601:318:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3618:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3629:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3611:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3611:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3611:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3652:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3663:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3648:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3648:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3668:2:22",
                                "type": "",
                                "value": "88"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3641:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3641:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3641:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3691:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3702:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3687:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3687:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3707:34:22",
                                "type": "",
                                "value": "Previous rewards period must be "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3680:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3680:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3680:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3762:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3773:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3758:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3758:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3778:34:22",
                                "type": "",
                                "value": "complete before changing the dur"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3751:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3751:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3751:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3833:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3844:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3829:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3829:19:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3850:26:22",
                                "type": "",
                                "value": "ation for the new period"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3822:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3822:55:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3822:55:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3886:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3898:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3909:3:22",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3894:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3894:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3886:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_07f2725172f5941b576a01ec7036d341e0c837e280f27b110cb3e6fd2f2c4a56__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3578:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3592:4:22",
                        "type": ""
                      }
                    ],
                    "src": "3427:492:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4098:228:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4115:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4126:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4108:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4108:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4108:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4149:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4160:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4145:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4145:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4165:2:22",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4138:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4138:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4138:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4188:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4199:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4184:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4184:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4204:34:22",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4177:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4177:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4177:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4259:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4270:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4255:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4255:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4275:8:22",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4248:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4248:36:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4248:36:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4293:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4305:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4316:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4301:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4301:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4293:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4075:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4089:4:22",
                        "type": ""
                      }
                    ],
                    "src": "3924:402:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4505:164:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4522:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4533:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4515:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4515:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4515:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4556:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4567:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4552:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4552:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4572:2:22",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4545:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4545:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4545:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4595:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4606:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4591:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4591:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4611:16:22",
                                "type": "",
                                "value": "Cannot stake 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4584:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4584:44:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4584:44:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4637:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4649:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4660:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4645:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4645:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4637:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4482:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4496:4:22",
                        "type": ""
                      }
                    ],
                    "src": "4331:338:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4848:228:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4865:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4876:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4858:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4858:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4858:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4899:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4910:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4895:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4895:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4915:2:22",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4888:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4888:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4888:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4938:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4949:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4934:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4934:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4954:34:22",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4927:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4927:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4927:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5009:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5020:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5005:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5005:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5025:8:22",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4998:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4998:36:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4998:36:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5043:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5055:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5066:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5051:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5051:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5043:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4825:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4839:4:22",
                        "type": ""
                      }
                    ],
                    "src": "4674:402:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5255:166:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5272:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5283:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5265:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5265:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5265:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5306:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5317:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5302:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5302:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5322:2:22",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5295:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5295:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5295:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5345:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5356:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5341:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5341:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5361:18:22",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5334:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5334:46:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5334:46:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5389:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5401:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5412:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5397:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5397:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5389:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5232:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5246:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5081:340:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5600:167:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5617:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5628:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5610:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5610:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5610:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5651:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5662:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5647:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5647:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5667:2:22",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5640:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5640:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5640:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5690:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5701:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5686:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5686:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5706:19:22",
                                "type": "",
                                "value": "Cannot withdraw 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5679:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5679:47:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5679:47:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5735:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5747:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5758:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5743:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5743:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5735:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5577:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5591:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5426:341:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5946:182:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5963:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5974:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5956:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5956:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5956:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5997:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6008:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5993:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5993:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6013:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5986:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5986:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5986:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6036:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6047:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6032:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6032:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6052:34:22",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6025:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6025:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6025:62:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6096:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6108:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6119:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6104:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6104:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6096:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5923:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5937:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5772:356:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6307:174:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6324:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6335:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6317:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6317:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6317:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6358:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6369:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6354:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6354:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6374:2:22",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6347:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6347:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6347:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6397:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6408:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6393:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6393:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6413:26:22",
                                "type": "",
                                "value": "Provided reward too high"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6386:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6386:54:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6386:54:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6449:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6461:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6472:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6457:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6457:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6449:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6284:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6298:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6133:348:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6660:179:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6677:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6688:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6670:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6670:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6670:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6711:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6722:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6707:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6707:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6727:2:22",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6700:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6700:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6700:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6750:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6761:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6746:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6746:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6766:31:22",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6739:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6739:59:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6739:59:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6807:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6819:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6830:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6815:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6815:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6807:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6637:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6651:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6486:353:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7018:232:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7035:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7046:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7028:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7028:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7028:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7069:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7080:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7065:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7065:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7085:2:22",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7058:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7058:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7058:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7108:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7119:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7104:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7104:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7124:34:22",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7097:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7097:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7097:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7179:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7190:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7175:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7175:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7195:12:22",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7168:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7168:40:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7168:40:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7217:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7229:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7240:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7225:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7225:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7217:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6995:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7009:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6844:406:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7429:181:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7446:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7457:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7439:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7439:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7439:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7480:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7491:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7476:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7476:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7496:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7469:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7469:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7469:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7519:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7530:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7515:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7515:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7535:33:22",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7508:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7508:61:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7508:61:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7578:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7590:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7601:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7586:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7586:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7578:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7406:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7420:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7255:355:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7789:223:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7806:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7817:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7799:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7799:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7799:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7840:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7851:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7836:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7836:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7856:2:22",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7829:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7829:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7829:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7879:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7890:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7875:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7875:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7895:34:22",
                                "type": "",
                                "value": "Cannot withdraw the staking toke"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7868:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7868:62:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7868:62:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7950:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7961:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7946:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7946:18:22"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7966:3:22",
                                "type": "",
                                "value": "n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7939:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7939:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7939:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7979:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7991:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8002:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7987:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7987:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7979:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_f43de9f2a3539b2ac9cf1844588e9cc0acd1b2bdb1ec43734f76440993ede0a9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7766:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7780:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7615:397:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8118:76:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8128:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8140:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8151:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8136:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8136:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8128:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8170:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8181:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8163:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8163:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8163:25:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8087:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8098:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8109:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8017:177:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8247:80:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8274:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "8276:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8276:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8276:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8263:1:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "8270:1:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "8266:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8266:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8260:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8260:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8257:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8305:16:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8316:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8319:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8312:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8312:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "8305:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "8230:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "8233:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "8239:3:22",
                        "type": ""
                      }
                    ],
                    "src": "8199:128:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8378:228:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8409:168:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "8430:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8433:77:22",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8423:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8423:88:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8423:88:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8531:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8534:4:22",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "8524:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8524:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8524:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "8559:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8562:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8552:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8552:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8552:15:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8398:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8391:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8391:9:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8388:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8586:14:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8595:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8598:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "8591:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8591:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "8586:1:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "8363:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "8366:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "8372:1:22",
                        "type": ""
                      }
                    ],
                    "src": "8332:274:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8663:116:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8722:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "8724:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8724:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8724:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "8694:1:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "8687:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8687:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "8680:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8680:17:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "8702:1:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8713:1:22",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "8709:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8709:6:22"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "8717:1:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "8705:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8705:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8699:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8699:21:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "8676:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8676:45:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8673:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8753:20:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8768:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8771:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "8764:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8764:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "8753:7:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "8642:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "8645:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "8651:7:22",
                        "type": ""
                      }
                    ],
                    "src": "8611:168:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8833:76:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8855:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "8857:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8857:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8857:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8849:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8852:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "8846:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8846:8:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8843:2:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8886:17:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "8898:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "8901:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8894:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8894:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "8886:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "8815:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "8818:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "8824:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8784:125:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8967:205:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8977:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8986:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "8981:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9046:63:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "9071:3:22"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "9076:1:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "9067:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9067:11:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "9090:3:22"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "9095:1:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "9086:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9086:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "9080:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9080:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9060:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9060:39:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9060:39:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "9007:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9010:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "9004:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9004:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "9018:19:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "9020:15:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "9029:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9032:2:22",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "9025:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9025:10:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "9020:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "9000:3:22",
                            "statements": []
                          },
                          "src": "8996:113:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9135:31:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "9148:3:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "9153:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "9144:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9144:16:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9162:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9137:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9137:27:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9137:27:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "9124:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9127:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9121:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9121:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "9118:2:22"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "8945:3:22",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "8950:3:22",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "8955:6:22",
                        "type": ""
                      }
                    ],
                    "src": "8914:258:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9209:152:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9226:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9229:77:22",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9219:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9219:88:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9219:88:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9323:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9326:4:22",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9316:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9316:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9316:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9347:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9350:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "9340:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9340:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9340:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "9177:184:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$859__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_07f2725172f5941b576a01ec7036d341e0c837e280f27b110cb3e6fd2f2c4a56__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 88)\n        mstore(add(headStart, 64), \"Previous rewards period must be \")\n        mstore(add(headStart, 96), \"complete before changing the dur\")\n        mstore(add(headStart, 128), \"ation for the new period\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Cannot stake 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Cannot withdraw 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Provided reward too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f43de9f2a3539b2ac9cf1844588e9cc0acd1b2bdb1ec43734f76440993ede0a9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Cannot withdraw the staking toke\")\n        mstore(add(headStart, 96), \"n\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106101ad5760003560e01c806380faa57d116100ee578063cc1a378f11610097578063df136d6511610071578063df136d65146102f7578063e9fad8ee146102ff578063ebe2b12b14610307578063f2fde38b1461030f576101ad565b8063cc1a378f146102d4578063cd3daf9d146102e7578063d1af0c7d146102ef576101ad565b80638da5cb5b116100c85780638da5cb5b146102b1578063a694fc3a146102b9578063c8f33c91146102cc576101ad565b806380faa57d146102835780638980f11f1461028b5780638b8763471461029e576101ad565b80633c6b16ab1161015b57806370a082311161013557806370a082311461024b578063715018a61461025e57806372f702f3146102665780637b0a47ee1461027b576101ad565b80633c6b16ab1461021b5780633d18b9121461022e5780635c975abb14610236576101ad565b80631c1f78eb1161018c5780631c1f78eb146101f65780632e1a7d4d146101fe578063386a952514610213576101ad565b80628cc262146101b25780630700037d146101db57806318160ddd146101ee575b600080fd5b6101c56101c0366004610fe7565b610322565b6040516101d2919061149b565b60405180910390f35b6101c56101e9366004610fe7565b6103a2565b6101c56103b4565b6101c56103bb565b61021161020c36600461104a565b6103d9565b005b6101c5610524565b61021161022936600461104a565b61052a565b610211610751565b61023e610858565b6040516101d291906110e7565b6101c5610259366004610fe7565b610861565b61021161087c565b61026e6108c7565b6040516101d29190611096565b6101c56108d6565b6101c56108dc565b610211610299366004611001565b6108f4565b6101c56102ac366004610fe7565b6109ba565b61026e6109cc565b6102116102c736600461104a565b6109db565b6101c5610b33565b6102116102e236600461104a565b610b39565b6101c5610bd9565b61026e610c27565b6101c5610c3b565b610211610c41565b6101c5610c62565b61021161031d366004610fe7565b610c68565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461039a919061039490670de0b6b3a76400009061038e9061036f90610369610bd9565b90610cd9565b6001600160a01b0388166000908152600c602052604090205490610cec565b90610cf8565b90610d04565b90505b919050565b600a6020526000908152604090205481565b600b545b90565b60006103d4600654600554610cec90919063ffffffff16565b905090565b600260015414156104055760405162461bcd60e51b81526004016103fc90611407565b60405180910390fd5b600260015533610413610bd9565b60085561041e6108dc565b6007556001600160a01b038116156104655761043981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116104855760405162461bcd60e51b81526004016103fc906112d0565b600b546104929083610cd9565b600b55336000908152600c60205260409020546104af9083610cd9565b336000818152600c60205260409020919091556003546104db916001600160a01b039091169084610d10565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610514919061149b565b60405180910390a2505060018055565b60065481565b610532610d98565b6001600160a01b03166105436109cc565b6001600160a01b0316146105695760405162461bcd60e51b81526004016103fc90611307565b6000610573610bd9565b60085561057e6108dc565b6007556001600160a01b038116156105c55761059981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106105e4576006546105dc908390610cf8565b600555610627565b6004546000906105f49042610cd9565b9050600061060d60055483610cec90919063ffffffff16565b6006549091506106219061038e8684610d04565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610676903090600401611096565b60206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611062565b90506106dd60065482610cf890919063ffffffff16565b60055411156106fe5760405162461bcd60e51b81526004016103fc9061133c565b4260078190556006546107119190610d04565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061074490859061149b565b60405180910390a1505050565b600260015414156107745760405162461bcd60e51b81526004016103fc90611407565b600260015533610782610bd9565b60085561078d6108dc565b6007556001600160a01b038116156107d4576107a881610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a6020526040902054801561085057336000818152600a6020526040812055600254610817916101009091046001600160a01b03169083610d10565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610514919061149b565b505060018055565b60025460ff1690565b6001600160a01b03166000908152600c602052604090205490565b610884610d98565b6001600160a01b03166108956109cc565b6001600160a01b0316146108bb5760405162461bcd60e51b81526004016103fc90611307565b6108c56000610d9c565b565b6003546001600160a01b031681565b60055481565b600060045442106108ef576004546103d4565b504290565b6108fc610d98565b6001600160a01b031661090d6109cc565b6001600160a01b0316146109335760405162461bcd60e51b81526004016103fc90611307565b6003546001600160a01b03838116911614156109615760405162461bcd60e51b81526004016103fc9061143e565b61097d61096c6109cc565b6001600160a01b0384169083610d10565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109ae9291906110ce565b60405180910390a15050565b60096020526000908152604090205481565b6000546001600160a01b031690565b600260015414156109fe5760405162461bcd60e51b81526004016103fc90611407565b6002600155610a0b610858565b15610a285760405162461bcd60e51b81526004016103fc90611299565b33610a31610bd9565b600855610a3c6108dc565b6007556001600160a01b03811615610a8357610a5781610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610aa35760405162461bcd60e51b81526004016103fc90611205565b600b54610ab09083610d04565b600b55336000908152600c6020526040902054610acd9083610d04565b336000818152600c6020526040902091909155600354610afa916001600160a01b03909116903085610e04565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610514919061149b565b60075481565b610b41610d98565b6001600160a01b0316610b526109cc565b6001600160a01b031614610b785760405162461bcd60e51b81526004016103fc90611307565b6004544211610b995760405162461bcd60e51b81526004016103fc90611125565b60068190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610bce90839061149b565b60405180910390a150565b6000600b5460001415610bef57506008546103b8565b6103d4610c1e600b5461038e670de0b6b3a7640000610c18600554610c186007546103696108dc565b90610cec565b60085490610d04565b60025461010090046001600160a01b031681565b60085481565b336000908152600c6020526040902054610c5a906103d9565b6108c5610751565b60045481565b610c70610d98565b6001600160a01b0316610c816109cc565b6001600160a01b031614610ca75760405162461bcd60e51b81526004016103fc90611307565b6001600160a01b038116610ccd5760405162461bcd60e51b81526004016103fc906111a8565b610cd681610d9c565b50565b6000610ce582846114fb565b9392505050565b6000610ce582846114dc565b6000610ce582846114bc565b6000610ce582846114a4565b610d938363a9059cbb60e01b8484604051602401610d2f9291906110ce565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e2b565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e25846323b872dd60e01b858585604051602401610d2f939291906110aa565b50505050565b6000610e80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eba9092919063ffffffff16565b805190915015610d935780806020019051810190610e9e919061102a565b610d935760405162461bcd60e51b81526004016103fc906113aa565b6060610ec98484600085610ed1565b949350505050565b606082471015610ef35760405162461bcd60e51b81526004016103fc9061123c565b610efc85610f91565b610f185760405162461bcd60e51b81526004016103fc90611373565b600080866001600160a01b03168587604051610f34919061107a565b60006040518083038185875af1925050503d8060008114610f71576040519150601f19603f3d011682016040523d82523d6000602084013e610f76565b606091505b5091509150610f86828286610f97565b979650505050505050565b3b151590565b60608315610fa6575081610ce5565b825115610fb65782518084602001fd5b8160405162461bcd60e51b81526004016103fc91906110f2565b80356001600160a01b038116811461039d57600080fd5b600060208284031215610ff8578081fd5b610ce582610fd0565b60008060408385031215611013578081fd5b61101c83610fd0565b946020939093013593505050565b60006020828403121561103b578081fd5b81518015158114610ce5578182fd5b60006020828403121561105b578081fd5b5035919050565b600060208284031215611073578081fd5b5051919050565b6000825161108c818460208701611512565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611111816040850160208701611512565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156114b7576114b761153e565b500190565b6000826114d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114f6576114f661153e565b500290565b60008282101561150d5761150d61153e565b500390565b60005b8381101561152d578181015183820152602001611515565b83811115610e255750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122024514ffbbea37ab62ec37df7251b63441e7a3cdde353f9b433840ea2cd1d379064736f6c63430008000033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80FAA57D GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xCC1A378F GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDF136D65 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xE9FAD8EE EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x30F JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0xCC1A378F EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x2EF JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x2CC JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x8980F11F EQ PUSH2 0x28B JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x29E JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x27B JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x3D18B912 EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x236 JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH4 0x1C1F78EB GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x213 JUMPI PUSH2 0x1AD JUMP JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1EE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C5 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x322 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C5 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x3A2 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x3B4 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x3BB JUMP JUMPDEST PUSH2 0x211 PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C5 PUSH2 0x524 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x229 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH2 0x211 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x858 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x10E7 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x861 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x87C JUMP JUMPDEST PUSH2 0x26E PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1096 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x8D6 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x211 PUSH2 0x299 CALLDATASIZE PUSH1 0x4 PUSH2 0x1001 JUMP JUMPDEST PUSH2 0x8F4 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0x2AC CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x26E PUSH2 0x9CC JUMP JUMPDEST PUSH2 0x211 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0x9DB JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xB33 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x2E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x104A JUMP JUMPDEST PUSH2 0xB39 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xBD9 JUMP JUMPDEST PUSH2 0x26E PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0x211 PUSH2 0xC41 JUMP JUMPDEST PUSH2 0x1C5 PUSH2 0xC62 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x31D CALLDATASIZE PUSH1 0x4 PUSH2 0xFE7 JUMP JUMPDEST PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x9 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH2 0x39A SWAP2 SWAP1 PUSH2 0x394 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x38E SWAP1 PUSH2 0x36F SWAP1 PUSH2 0x369 PUSH2 0xBD9 JUMP JUMPDEST SWAP1 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0xCEC JUMP JUMPDEST SWAP1 PUSH2 0xCF8 JUMP JUMPDEST SWAP1 PUSH2 0xD04 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D4 PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD PUSH2 0xCEC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x405 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE CALLER PUSH2 0x413 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x41E PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x465 JUMPI PUSH2 0x439 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x485 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x12D0 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x492 SWAP1 DUP4 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0xB SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x4AF SWAP1 DUP4 PUSH2 0xCD9 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x3 SLOAD PUSH2 0x4DB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 PUSH2 0xD10 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 DUP4 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x532 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x543 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x569 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x573 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x57E PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x5C5 JUMPI PUSH2 0x599 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0x5E4 JUMPI PUSH1 0x6 SLOAD PUSH2 0x5DC SWAP1 DUP4 SWAP1 PUSH2 0xCF8 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH2 0x627 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x5F4 SWAP1 TIMESTAMP PUSH2 0xCD9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x60D PUSH1 0x5 SLOAD DUP4 PUSH2 0xCEC SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP2 POP PUSH2 0x621 SWAP1 PUSH2 0x38E DUP7 DUP5 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x5 SSTORE POP POP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x676 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x68E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP1 POP PUSH2 0x6DD PUSH1 0x6 SLOAD DUP3 PUSH2 0xCF8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 SLOAD GT ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x133C JUMP JUMPDEST TIMESTAMP PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x6 SLOAD PUSH2 0x711 SWAP2 SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x40 MLOAD PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D SWAP1 PUSH2 0x744 SWAP1 DUP6 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE CALLER PUSH2 0x782 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x78D PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x7D4 JUMPI PUSH2 0x7A8 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x850 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x2 SLOAD PUSH2 0x817 SWAP2 PUSH2 0x100 SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 PUSH2 0xD10 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 DUP3 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST POP POP PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x884 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x895 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x8BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x8C5 PUSH1 0x0 PUSH2 0xD9C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 SLOAD TIMESTAMP LT PUSH2 0x8EF JUMPI PUSH1 0x4 SLOAD PUSH2 0x3D4 JUMP JUMPDEST POP TIMESTAMP SWAP1 JUMP JUMPDEST PUSH2 0x8FC PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x90D PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x933 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x961 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x143E JUMP JUMPDEST PUSH2 0x97D PUSH2 0x96C PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 PUSH2 0xD10 JUMP JUMPDEST PUSH32 0x8C1256B8896378CD5044F80C202F9772B9D77DC85C8A6EB51967210B09BFAA28 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x9AE SWAP3 SWAP2 SWAP1 PUSH2 0x10CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x9FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1407 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xA0B PUSH2 0x858 JUMP JUMPDEST ISZERO PUSH2 0xA28 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1299 JUMP JUMPDEST CALLER PUSH2 0xA31 PUSH2 0xBD9 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xA3C PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x7 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA83 JUMPI PUSH2 0xA57 DUP2 PUSH2 0x322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 SLOAD PUSH1 0x9 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0xAA3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1205 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0xAB0 SWAP1 DUP4 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0xB SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xACD SWAP1 DUP4 PUSH2 0xD04 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x3 SLOAD PUSH2 0xAFA SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP6 PUSH2 0xE04 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D DUP4 PUSH1 0x40 MLOAD PUSH2 0x514 SWAP2 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB41 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB52 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP GT PUSH2 0xB99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1125 JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xFB46CA5A5E06D4540D6387B930A7C978BCE0DB5F449EC6B3F5D07C6E1D44F2D3 SWAP1 PUSH2 0xBCE SWAP1 DUP4 SWAP1 PUSH2 0x149B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xBEF JUMPI POP PUSH1 0x8 SLOAD PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0xC1E PUSH1 0xB SLOAD PUSH2 0x38E PUSH8 0xDE0B6B3A7640000 PUSH2 0xC18 PUSH1 0x5 SLOAD PUSH2 0xC18 PUSH1 0x7 SLOAD PUSH2 0x369 PUSH2 0x8DC JUMP JUMPDEST SWAP1 PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP1 PUSH2 0xD04 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xC5A SWAP1 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x8C5 PUSH2 0x751 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xC70 PUSH2 0xD98 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xC81 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1307 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xCCD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x11A8 JUMP JUMPDEST PUSH2 0xCD6 DUP2 PUSH2 0xD9C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14FB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE5 DUP3 DUP5 PUSH2 0x14A4 JUMP JUMPDEST PUSH2 0xD93 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD2F SWAP3 SWAP2 SWAP1 PUSH2 0x10CE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xE2B JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xE25 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xEBA SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD93 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE9E SWAP2 SWAP1 PUSH2 0x102A JUMP JUMPDEST PUSH2 0xD93 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x13AA JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEC9 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xED1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x123C JUMP JUMPDEST PUSH2 0xEFC DUP6 PUSH2 0xF91 JUMP JUMPDEST PUSH2 0xF18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xF34 SWAP2 SWAP1 PUSH2 0x107A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xF86 DUP3 DUP3 DUP7 PUSH2 0xF97 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xFA6 JUMPI POP DUP2 PUSH2 0xCE5 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xFB6 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x10F2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x39D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFF8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xCE5 DUP3 PUSH2 0xFD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1013 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x101C DUP4 PUSH2 0xFD0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCE5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x105B JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1073 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x108C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1512 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1111 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1512 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x58 SWAP1 DUP3 ADD MSTORE PUSH32 0x50726576696F7573207265776172647320706572696F64206D75737420626520 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636F6D706C657465206265666F7265206368616E67696E672074686520647572 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x6174696F6E20666F7220746865206E657720706572696F640000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH32 0x5061757361626C653A2070617573656400000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420776974686472617720746865207374616B696E6720746F6B65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E00000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x14B7 JUMPI PUSH2 0x14B7 PUSH2 0x153E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14D7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x14F6 JUMPI PUSH2 0x14F6 PUSH2 0x153E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x150D JUMPI PUSH2 0x150D PUSH2 0x153E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1515 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xE25 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 MLOAD 0x4F 0xFB 0xBE LOG3 PUSH27 0xB62EC37DF7251B63441E7A3CDDE353F9B433840EA2CD1D37906473 PUSH16 0x6C634300080000330000000000000000 ",
          "sourceMap": "495:5600:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2047:232;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;991:42;;;;;;:::i;:::-;;:::i;1333:94::-;;;:::i;2283:122::-;;;:::i;2849:356::-;;;;;;:::i;:::-;;:::i;:::-;;814:39;;;:::i;3639:1024::-;;;;;;:::i;:::-;;:::i;3209:277::-;;;:::i;1041:84:1:-;;;:::i;:::-;;;;;;;:::i;1431:113:19:-;;;;;;:::i;:::-;;:::i;1605:92:0:-;;;:::i;716:26:19:-;;;:::i;:::-;;;;;;;:::i;781:29::-;;;:::i;1548:156::-;;;:::i;4771:314::-;;;;;;:::i;:::-;;:::i;930:57::-;;;;;;:::i;:::-;;:::i;973:85:0:-;;;:::i;2459:386:19:-;;;;;;:::i;:::-;;:::i;857:29::-;;;:::i;5089:323::-;;;;;;:::i;:::-;;:::i;1708:335::-;;;:::i;686:26::-;;;:::i;890:35::-;;;:::i;3490:93::-;;;:::i;746:31::-;;;:::i;1846:189:0:-;;;;;;:::i;:::-;;:::i;2047:232:19:-;-1:-1:-1;;;;;2257:16:19;;2110:7;2257:16;;;:7;:16;;;;;;;;;2191:22;:31;;;;;;2138:136;;2257:16;2138:105;;2238:4;;2138:86;;2170:53;;:16;:14;:16::i;:::-;:20;;:53::i;:::-;-1:-1:-1;;;;;2138:18:19;;;;;;:9;:18;;;;;;;:31;:86::i;:::-;:99;;:105::i;:::-;:118;;:136::i;:::-;2125:149;;2047:232;;;;:::o;991:42::-;;;;;;;;;;;;;:::o;1333:94::-;1410:12;;1333:94;;:::o;2283:122::-;2347:7;2369:31;2384:15;;2369:10;;:14;;:31;;;;:::i;:::-;2362:38;;2283:122;:::o;2849:356::-;1680:1:2;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:2;;;;;;;:::i;:::-;;;;;;;;;1680:1;2389:7;:18;2941:10:19::1;5525:16;:14;:16::i;:::-;5502:20;:39:::0;5564:26:::1;:24;:26::i;:::-;5547:14;:43:::0;-1:-1:-1;;;;;5600:21:19;::::1;::::0;5596:138:::1;;5650:15;5657:7;5650:6;:15::i;:::-;-1:-1:-1::0;;;;;5631:16:19;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:34;;;;5707:20:::1;::::0;5673:22:::1;:31:::0;;;;;;:54;5596:138:::1;2978:1:::2;2969:6;:10;2961:40;;;;-1:-1:-1::0;;;2961:40:19::2;;;;;;;:::i;:::-;3022:12;::::0;:24:::2;::::0;3039:6;3022:16:::2;:24::i;:::-;3007:12;:39:::0;3086:10:::2;3076:21;::::0;;;:9:::2;:21;::::0;;;;;:33:::2;::::0;3102:6;3076:25:::2;:33::i;:::-;3062:10;3052:21;::::0;;;:9:::2;:21;::::0;;;;:57;;;;3115:12:::2;::::0;:45:::2;::::0;-1:-1:-1;;;;;3115:12:19;;::::2;::::0;3153:6;3115:25:::2;:45::i;:::-;3181:10;-1:-1:-1::0;;;;;3171:29:19::2;;3193:6;3171:29;;;;;;:::i;:::-;;;;;;;;-1:-1:-1::0;;1637:1:2;2562:22;;2849:356:19:o;814:39::-;;;;:::o;3639:1024::-;1196:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;3748:1:19::1;5525:16;:14;:16::i;:::-;5502:20;:39:::0;5564:26:::1;:24;:26::i;:::-;5547:14;:43:::0;-1:-1:-1;;;;;5600:21:19;::::1;::::0;5596:138:::1;;5650:15;5657:7;5650:6;:15::i;:::-;-1:-1:-1::0;;;;;5631:16:19;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:34;;;;5707:20:::1;::::0;5673:22:::1;:31:::0;;;;;;:54;5596:138:::1;3783:12:::2;;3764:15;:31;3760:280;;3829:15;::::0;3818:27:::2;::::0;:6;;:10:::2;:27::i;:::-;3805:10;:40:::0;3760:280:::2;;;3886:12;::::0;3866:17:::2;::::0;3886:33:::2;::::0;3903:15:::2;3886:16;:33::i;:::-;3866:53;;3927:16;3946:25;3960:10;;3946:9;:13;;:25;;;;:::i;:::-;4017:15;::::0;3927:44;;-1:-1:-1;3992:41:19::2;::::0;:20:::2;:6:::0;3927:44;3992:10:::2;:20::i;:41::-;3979:10;:54:::0;-1:-1:-1;;3760:280:19::2;4392:12;::::0;:37:::2;::::0;;;;4374:15:::2;::::0;4392:12:::2;::::0;::::2;-1:-1:-1::0;;;;;4392:12:19::2;::::0;:22:::2;::::0;:37:::2;::::0;4423:4:::2;::::0;4392:37:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4374:55;;4464:28;4476:15;;4464:7;:11;;:28;;;;:::i;:::-;4450:10;;:42;;4435:97;;;;-1:-1:-1::0;;;4435:97:19::2;;;;;;;:::i;:::-;4556:15;4539:14;:32:::0;;;4612:15:::2;::::0;4592:36:::2;::::0;4556:15;4592:19:::2;:36::i;:::-;4577:12;:51:::0;4639:19:::2;::::0;::::2;::::0;::::2;::::0;4651:6;;4639:19:::2;:::i;:::-;;;;;;;;5739:1;1255::0::1;3639:1024:19::0;:::o;3209:277::-;1680:1:2;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:2;;;;;;;:::i;:::-;1680:1;2389:7;:18;3272:10:19::1;5525:16;:14;:16::i;:::-;5502:20;:39:::0;5564:26:::1;:24;:26::i;:::-;5547:14;:43:::0;-1:-1:-1;;;;;5600:21:19;::::1;::::0;5596:138:::1;;5650:15;5657:7;5650:6;:15::i;:::-;-1:-1:-1::0;;;;;5631:16:19;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:34;;;;5707:20:::1;::::0;5673:22:::1;:31:::0;;;;;;:54;5596:138:::1;3315:10:::2;3290:14;3307:19:::0;;;:7:::2;:19;::::0;;;;;3336:10;;3332:150:::2;;3364:10;3378:1;3356:19:::0;;;:7:::2;:19;::::0;;;;:23;3387:12:::2;::::0;:45:::2;::::0;:12:::2;::::0;;::::2;-1:-1:-1::0;;;;;3387:12:19::2;::::0;3425:6;3387:25:::2;:45::i;:::-;3456:10;-1:-1:-1::0;;;;;3445:30:19::2;;3468:6;3445:30;;;;;;:::i;3332:150::-;-1:-1:-1::0;;1637:1:2;2562:22;;3209:277:19:o;1041:84:1:-;1111:7;;;;1041:84;:::o;1431:113:19:-;-1:-1:-1;;;;;1521:18:19;1499:7;1521:18;;;:9;:18;;;;;;;1431:113::o;1605:92:0:-;1196:12;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;716:26:19:-;;;-1:-1:-1;;;;;716:26:19;;:::o;781:29::-;;;;:::o;1548:156::-;1614:7;1654:12;;1636:15;:30;:63;;1687:12;;1636:63;;;-1:-1:-1;1669:15:19;;1548:156::o;4771:314::-;1196:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;4910:12:19::1;::::0;-1:-1:-1;;;;;4886:37:19;;::::1;4910:12:::0;::::1;4886:37;;4871:101;;;;-1:-1:-1::0;;;4871:101:19::1;;;;;;;:::i;:::-;4978:55;5012:7;:5;:7::i;:::-;-1:-1:-1::0;;;;;4978:33:19;::::1;::::0;5021:11;4978:33:::1;:55::i;:::-;5044:36;5054:12;5068:11;5044:36;;;;;;;:::i;:::-;;;;;;;;4771:314:::0;;:::o;930:57::-;;;;;;;;;;;;;:::o;973:85:0:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:0;973:85;:::o;2459:386:19:-;1680:1:2;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:2;;;;;;;:::i;:::-;1680:1;2389:7;:18;1355:8:1::1;:6;:8::i;:::-;1354:9;1346:38;;;;-1:-1:-1::0;;;1346:38:1::1;;;;;;;:::i;:::-;2568:10:19::2;5525:16;:14;:16::i;:::-;5502:20;:39:::0;5564:26:::2;:24;:26::i;:::-;5547:14;:43:::0;-1:-1:-1;;;;;5600:21:19;::::2;::::0;5596:138:::2;;5650:15;5657:7;5650:6;:15::i;:::-;-1:-1:-1::0;;;;;5631:16:19;::::2;;::::0;;;:7:::2;:16;::::0;;;;;;;:34;;;;5707:20:::2;::::0;5673:22:::2;:31:::0;;;;;;:54;5596:138:::2;2605:1:::3;2596:6;:10;2588:37;;;;-1:-1:-1::0;;;2588:37:19::3;;;;;;;:::i;:::-;2646:12;::::0;:24:::3;::::0;2663:6;2646:16:::3;:24::i;:::-;2631:12;:39:::0;2710:10:::3;2700:21;::::0;;;:9:::3;:21;::::0;;;;;:33:::3;::::0;2726:6;2700:25:::3;:33::i;:::-;2686:10;2676:21;::::0;;;:9:::3;:21;::::0;;;;:57;;;;2739:12:::3;::::0;:64:::3;::::0;-1:-1:-1;;;;;2739:12:19;;::::3;::::0;2789:4:::3;2796:6:::0;2739:29:::3;:64::i;:::-;2821:10;-1:-1:-1::0;;;;;2814:26:19::3;;2833:6;2814:26;;;;;;:::i;857:29::-:0;;;;:::o;5089:323::-;1196:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;5201:12:19::1;;5183:15;:30;5168:149;;;;-1:-1:-1::0;;;5168:149:19::1;;;;;;;:::i;:::-;5323:15;:34:::0;;;5368:39:::1;::::0;::::1;::::0;::::1;::::0;5341:16;;5368:39:::1;:::i;:::-;;;;;;;;5089:323:::0;:::o;1708:335::-;1764:7;1783:12;;1799:1;1783:17;1779:65;;;-1:-1:-1;1817:20:19;;1810:27;;1779:65;1862:176;1896:134;2017:12;;1896:105;1996:4;1896:84;1969:10;;1896:57;1938:14;;1896:26;:24;:26::i;:57::-;:72;;:84::i;:134::-;1862:20;;;:24;:176::i;686:26::-;;;;;;-1:-1:-1;;;;;686:26:19;;:::o;890:35::-;;;;:::o;3490:93::-;3549:10;3539:21;;;;:9;:21;;;;;;3530:31;;:8;:31::i;:::-;3567:11;:9;:11::i;746:31::-;;;;:::o;1846:189:0:-;1196:12;:10;:12::i;:::-;-1:-1:-1;;;;;1185:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1185:23:0;;1177:68;;;;-1:-1:-1;;;1177:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:0;::::1;1926:73;;;;-1:-1:-1::0;;;1926:73:0::1;;;;;;;:::i;:::-;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;3039:96:15:-;3097:7;3123:5;3127:1;3123;:5;:::i;:::-;3116:12;3039:96;-1:-1:-1;;;3039:96:15:o;3382:::-;3440:7;3466:5;3470:1;3466;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;2672:96::-;2730:7;2756:5;2760:1;2756;:5;:::i;634:205:9:-;746:86;766:5;796:23;;;821:2;825:5;773:58;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;773:58:9;;;;;;;;;;;;;;;;;;;;;;;;;;;746:19;:86::i;:::-;634:205;;;:::o;587:96:11:-;666:10;587:96;:::o;2041:169:0:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:0;;;;;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;845:241:9:-;983:96;1003:5;1033:27;;;1062:4;1068:2;1072:5;1010:68;;;;;;;;;;:::i;983:96::-;845:241;;;;:::o;3140:706::-;3559:23;3585:69;3613:4;3585:69;;;;;;;;;;;;;;;;;3593:5;-1:-1:-1;;;;;3585:27:9;;;:69;;;;;:::i;:::-;3668:17;;3559:95;;-1:-1:-1;3668:21:9;3664:176;;3763:10;3752:30;;;;;;;;;;;;:::i;:::-;3744:85;;;;-1:-1:-1;;;3744:85:9;;;;;;;:::i;3461:223:10:-;3594:12;3625:52;3647:6;3655:4;3661:1;3664:12;3625:21;:52::i;:::-;3618:59;3461:223;-1:-1:-1;;;;3461:223:10:o;4548:499::-;4713:12;4770:5;4745:21;:30;;4737:81;;;;-1:-1:-1;;;4737:81:10;;;;;;;:::i;:::-;4836:18;4847:6;4836:10;:18::i;:::-;4828:60;;;;-1:-1:-1;;;4828:60:10;;;;;;;:::i;:::-;4900:12;4914:23;4941:6;-1:-1:-1;;;;;4941:11:10;4960:5;4967:4;4941:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4899:73;;;;4989:51;5006:7;5015:10;5027:12;4989:16;:51::i;:::-;4982:58;4548:499;-1:-1:-1;;;;;;;4548:499:10:o;718:377::-;1034:20;1080:8;;;718:377::o;7161:692::-;7307:12;7335:7;7331:516;;;-1:-1:-1;7365:10:10;7358:17;;7331:516;7476:17;;:21;7472:365;;7670:10;7664:17;7730:15;7717:10;7713:2;7709:19;7702:44;7619:145;7809:12;7802:20;;-1:-1:-1;;;7802:20:10;;;;;;;;:::i;14:198:22:-;84:20;;-1:-1:-1;;;;;133:54:22;;123:65;;113:2;;202:1;199;192:12;217:198;;329:2;317:9;308:7;304:23;300:32;297:2;;;350:6;342;335:22;297:2;378:31;399:9;378:31;:::i;420:266::-;;;549:2;537:9;528:7;524:23;520:32;517:2;;;570:6;562;555:22;517:2;598:31;619:9;598:31;:::i;:::-;588:41;676:2;661:18;;;;648:32;;-1:-1:-1;;;507:179:22:o;691:297::-;;811:2;799:9;790:7;786:23;782:32;779:2;;;832:6;824;817:22;779:2;869:9;863:16;922:5;915:13;908:21;901:5;898:32;888:2;;949:6;941;934:22;993:190;;1105:2;1093:9;1084:7;1080:23;1076:32;1073:2;;;1126:6;1118;1111:22;1073:2;-1:-1:-1;1154:23:22;;1063:120;-1:-1:-1;1063:120:22:o;1188:194::-;;1311:2;1299:9;1290:7;1286:23;1282:32;1279:2;;;1332:6;1324;1317:22;1279:2;-1:-1:-1;1360:16:22;;1269:113;-1:-1:-1;1269:113:22:o;1387:274::-;;1554:6;1548:13;1570:53;1616:6;1611:3;1604:4;1596:6;1592:17;1570:53;:::i;:::-;1639:16;;;;;1524:137;-1:-1:-1;;1524:137:22:o;1666:226::-;-1:-1:-1;;;;;1830:55:22;;;;1812:74;;1800:2;1785:18;;1767:125::o;1897:398::-;-1:-1:-1;;;;;2178:15:22;;;2160:34;;2230:15;;;;2225:2;2210:18;;2203:43;2277:2;2262:18;;2255:34;;;;2087:2;2072:18;;2054:241::o;2300:297::-;-1:-1:-1;;;;;2492:55:22;;;;2474:74;;2579:2;2564:18;;2557:34;2462:2;2447:18;;2429:168::o;2602:187::-;2767:14;;2760:22;2742:41;;2730:2;2715:18;;2697:92::o;3039:383::-;;3188:2;3177:9;3170:21;3220:6;3214:13;3263:6;3258:2;3247:9;3243:18;3236:34;3279:66;3338:6;3333:2;3322:9;3318:18;3313:2;3305:6;3301:15;3279:66;:::i;:::-;3406:2;3385:15;-1:-1:-1;;3381:29:22;3366:45;;;;3413:2;3362:54;;3160:262;-1:-1:-1;;3160:262:22:o;3427:492::-;3629:2;3611:21;;;3668:2;3648:18;;;3641:30;3707:34;3702:2;3687:18;;3680:62;3778:34;3773:2;3758:18;;3751:62;3850:26;3844:3;3829:19;;3822:55;3909:3;3894:19;;3601:318::o;3924:402::-;4126:2;4108:21;;;4165:2;4145:18;;;4138:30;4204:34;4199:2;4184:18;;4177:62;4275:8;4270:2;4255:18;;4248:36;4316:3;4301:19;;4098:228::o;4331:338::-;4533:2;4515:21;;;4572:2;4552:18;;;4545:30;4611:16;4606:2;4591:18;;4584:44;4660:2;4645:18;;4505:164::o;4674:402::-;4876:2;4858:21;;;4915:2;4895:18;;;4888:30;4954:34;4949:2;4934:18;;4927:62;5025:8;5020:2;5005:18;;4998:36;5066:3;5051:19;;4848:228::o;5081:340::-;5283:2;5265:21;;;5322:2;5302:18;;;5295:30;5361:18;5356:2;5341:18;;5334:46;5412:2;5397:18;;5255:166::o;5426:341::-;5628:2;5610:21;;;5667:2;5647:18;;;5640:30;5706:19;5701:2;5686:18;;5679:47;5758:2;5743:18;;5600:167::o;5772:356::-;5974:2;5956:21;;;5993:18;;;5986:30;6052:34;6047:2;6032:18;;6025:62;6119:2;6104:18;;5946:182::o;6133:348::-;6335:2;6317:21;;;6374:2;6354:18;;;6347:30;6413:26;6408:2;6393:18;;6386:54;6472:2;6457:18;;6307:174::o;6486:353::-;6688:2;6670:21;;;6727:2;6707:18;;;6700:30;6766:31;6761:2;6746:18;;6739:59;6830:2;6815:18;;6660:179::o;6844:406::-;7046:2;7028:21;;;7085:2;7065:18;;;7058:30;7124:34;7119:2;7104:18;;7097:62;7195:12;7190:2;7175:18;;7168:40;7240:3;7225:19;;7018:232::o;7255:355::-;7457:2;7439:21;;;7496:2;7476:18;;;7469:30;7535:33;7530:2;7515:18;;7508:61;7601:2;7586:18;;7429:181::o;7615:397::-;7817:2;7799:21;;;7856:2;7836:18;;;7829:30;7895:34;7890:2;7875:18;;7868:62;7966:3;7961:2;7946:18;;7939:31;8002:3;7987:19;;7789:223::o;8017:177::-;8163:25;;;8151:2;8136:18;;8118:76::o;8199:128::-;;8270:1;8266:6;8263:1;8260:13;8257:2;;;8276:18;;:::i;:::-;-1:-1:-1;8312:9:22;;8247:80::o;8332:274::-;;8398:1;8388:2;;-1:-1:-1;;;8430:1:22;8423:88;8534:4;8531:1;8524:15;8562:4;8559:1;8552:15;8388:2;-1:-1:-1;8591:9:22;;8378:228::o;8611:168::-;;8717:1;8713;8709:6;8705:14;8702:1;8699:21;8694:1;8687:9;8680:17;8676:45;8673:2;;;8724:18;;:::i;:::-;-1:-1:-1;8764:9:22;;8663:116::o;8784:125::-;;8852:1;8849;8846:8;8843:2;;;8857:18;;:::i;:::-;-1:-1:-1;8894:9:22;;8833:76::o;8914:258::-;8986:1;8996:113;9010:6;9007:1;9004:13;8996:113;;;9086:11;;;9080:18;9067:11;;;9060:39;9032:2;9025:10;8996:113;;;9127:6;9124:1;9121:13;9118:2;;;-1:-1:-1;;9162:1:22;9144:16;;9137:27;8967:205::o;9177:184::-;-1:-1:-1;;;9226:1:22;9219:88;9326:4;9323:1;9316:15;9350:4;9347:1;9340:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1102800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "balanceOf(address)": "1315",
            "earned(address)": "infinite",
            "exit()": "infinite",
            "getReward()": "infinite",
            "getRewardForDuration()": "infinite",
            "lastTimeRewardApplicable()": "1915",
            "lastUpdateTime()": "1117",
            "notifyRewardAmount(uint256)": "infinite",
            "owner()": "1115",
            "paused()": "1130",
            "periodFinish()": "1116",
            "recoverERC20(address,uint256)": "infinite",
            "renounceOwnership()": "23556",
            "rewardPerToken()": "infinite",
            "rewardPerTokenStored()": "1072",
            "rewardRate()": "1139",
            "rewards(address)": "1321",
            "rewardsDuration()": "1118",
            "rewardsToken()": "1170",
            "setRewardsDuration(uint256)": "23122",
            "stake(uint256)": "infinite",
            "stakingToken()": "1159",
            "totalSupply()": "1120",
            "transferOwnership(address)": "23794",
            "userRewardPerTokenPaid(address)": "1342",
            "withdraw(uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "balanceOf(address)": "70a08231",
          "earned(address)": "008cc262",
          "exit()": "e9fad8ee",
          "getReward()": "3d18b912",
          "getRewardForDuration()": "1c1f78eb",
          "lastTimeRewardApplicable()": "80faa57d",
          "lastUpdateTime()": "c8f33c91",
          "notifyRewardAmount(uint256)": "3c6b16ab",
          "owner()": "8da5cb5b",
          "paused()": "5c975abb",
          "periodFinish()": "ebe2b12b",
          "recoverERC20(address,uint256)": "8980f11f",
          "renounceOwnership()": "715018a6",
          "rewardPerToken()": "cd3daf9d",
          "rewardPerTokenStored()": "df136d65",
          "rewardRate()": "7b0a47ee",
          "rewards(address)": "0700037d",
          "rewardsDuration()": "386a9525",
          "rewardsToken()": "d1af0c7d",
          "setRewardsDuration(uint256)": "cc1a378f",
          "stake(uint256)": "a694fc3a",
          "stakingToken()": "72f702f3",
          "totalSupply()": "18160ddd",
          "transferOwnership(address)": "f2fde38b",
          "userRewardPerTokenPaid(address)": "8b876347",
          "withdraw(uint256)": "2e1a7d4d"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/utils/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/core/interfaces/IStakingRewards.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n  // Views\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function getRewardForDuration() external view returns (uint256);\\n\\n  // Mutative\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\",\"keccak256\":\"0xd0fac859035cd3b24ed0d6cc4776d6cfa2530421fdd72804d43ea6f2cda4aa11\"},\"contracts/core/utils/StakingRewards.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract StakingRewards is IStakingRewards, Ownable, ReentrancyGuard, Pausable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IERC20 public rewardsToken;\\n  IERC20 public stakingToken;\\n  uint256 public periodFinish = 0;\\n  uint256 public rewardRate = 0;\\n  uint256 public rewardsDuration = 7 days;\\n  uint256 public lastUpdateTime;\\n  uint256 public rewardPerTokenStored;\\n\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  mapping(address => uint256) public rewards;\\n\\n  uint256 private _totalSupply;\\n  mapping(address => uint256) private _balances;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(IERC20 _rewardsToken, IERC20 _stakingToken) {\\n    rewardsToken = _rewardsToken;\\n    stakingToken = _stakingToken;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function lastTimeRewardApplicable() public view override returns (uint256) {\\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n  }\\n\\n  function rewardPerToken() public view override returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(_totalSupply)\\n      );\\n  }\\n\\n  function earned(address account) public view override returns (uint256) {\\n    return\\n      _balances[account]\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n        .div(1e18)\\n        .add(rewards[account]);\\n  }\\n\\n  function getRewardForDuration() external view override returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function stake(uint256 amount)\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    emit Staked(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount)\\n    public\\n    override\\n    nonReentrant\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n    stakingToken.safeTransfer(msg.sender, amount);\\n    emit Withdrawn(msg.sender, amount);\\n  }\\n\\n  function getReward() public override nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardsToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  function exit() external override {\\n    withdraw(_balances[msg.sender]);\\n    getReward();\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function notifyRewardAmount(uint256 reward)\\n    external\\n    override\\n    onlyOwner\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(rewardsDuration),\\n      \\\"Provided reward too high\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(reward);\\n  }\\n\\n  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      tokenAddress != address(stakingToken),\\n      \\\"Cannot withdraw the staking token\\\"\\n    );\\n    IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5073a7e8222bc047448353cc66e3a24a13b7255ed1ac7d5546c3800f9778bff6\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 7,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 206,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 121,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "_paused",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2792,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "rewardsToken",
            "offset": 1,
            "slot": "2",
            "type": "t_contract(IERC20)859"
          },
          {
            "astId": 2795,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "stakingToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)859"
          },
          {
            "astId": 2798,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "periodFinish",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2801,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "rewardRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2804,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "rewardsDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2806,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2808,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2812,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "userRewardPerTokenPaid",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2816,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "rewards",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2818,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 2822,
            "contract": "contracts/core/utils/StakingRewards.sol:StakingRewards",
            "label": "_balances",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)859": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/core/interfaces/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/test_helpers/Faucet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface Uniswap {\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function WETH() external pure returns (address);\\n}\\n\\ninterface CurveDepositZap {\\n  function add_liquidity(\\n    address pool,\\n    uint256[4] calldata amounts,\\n    uint256 min_mint_amounts,\\n    address receiver\\n  ) external returns (uint256);\\n}\\n\\ninterface TriPool {\\n  function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amounts) external;\\n}\\n\\ninterface CurveAddressProvider {\\n  function get_registry() external view returns (address);\\n}\\n\\ninterface CurveRegistry {\\n  function get_pool_from_lp_token(address lp_token) external view returns (address);\\n}\\n\\ncontract Faucet {\\n  Uniswap public uniswap;\\n  CurveDepositZap public curveDepositZap;\\n  CurveAddressProvider public curveAddressProvider;\\n  CurveRegistry public curveRegistry;\\n  address public triPool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n  IERC20 public dai = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n  IERC20 public threeCrv = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\\n\\n  constructor(\\n    address uniswap_,\\n    address curveAddressProvider_,\\n    address curveDepositZap_\\n  ) {\\n    uniswap = Uniswap(uniswap_);\\n    curveDepositZap = CurveDepositZap(curveDepositZap_);\\n    curveAddressProvider = CurveAddressProvider(curveAddressProvider_);\\n    curveRegistry = CurveRegistry(curveAddressProvider.get_registry());\\n    dai.approve(address(curveDepositZap), type(uint256).max);\\n    dai.approve(address(triPool), type(uint256).max);\\n  }\\n\\n  function sendTokens(\\n    address token,\\n    uint256 amount,\\n    address recipient\\n  ) public {\\n    address[] memory path = new address[](2);\\n    path[0] = uniswap.WETH();\\n    path[1] = token;\\n    uniswap.swapExactETHForTokens{value: amount * 1 ether}(0, path, recipient, block.timestamp);\\n  }\\n\\n  function sendCurveLPTokens(\\n    address lpToken,\\n    uint256 amount,\\n    address recipient\\n  ) public {\\n    address[] memory path = new address[](2);\\n    path[0] = uniswap.WETH();\\n    path[1] = address(dai);\\n    uint256 daiAmount = uniswap.swapExactETHForTokens{value: amount * 1 ether}(0, path, address(this), block.timestamp)[\\n      1\\n    ];\\n    address curvePool = curveRegistry.get_pool_from_lp_token(lpToken);\\n    curveDepositZap.add_liquidity(curvePool, [0, daiAmount, 0, 0], 0, recipient);\\n  }\\n\\n  function sendThreeCrv(uint256 amount, address recipient) public {\\n    address[] memory path = new address[](2);\\n    path[0] = uniswap.WETH();\\n    path[1] = address(dai);\\n    uint256 daiAmount = uniswap.swapExactETHForTokens{value: amount * 1 ether}(0, path, address(this), block.timestamp)[\\n      1\\n    ];\\n    TriPool(triPool).add_liquidity([daiAmount, 0, 0], 0);\\n    threeCrv.transfer(recipient, threeCrv.balanceOf(address(this)));\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/core/utils/StakingRewards.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IStakingRewards.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract StakingRewards is IStakingRewards, Ownable, ReentrancyGuard, Pausable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  IERC20 public rewardsToken;\\n  IERC20 public stakingToken;\\n  uint256 public periodFinish = 0;\\n  uint256 public rewardRate = 0;\\n  uint256 public rewardsDuration = 7 days;\\n  uint256 public lastUpdateTime;\\n  uint256 public rewardPerTokenStored;\\n\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n  mapping(address => uint256) public rewards;\\n\\n  uint256 private _totalSupply;\\n  mapping(address => uint256) private _balances;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(IERC20 _rewardsToken, IERC20 _stakingToken) {\\n    rewardsToken = _rewardsToken;\\n    stakingToken = _stakingToken;\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function lastTimeRewardApplicable() public view override returns (uint256) {\\n    return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n  }\\n\\n  function rewardPerToken() public view override returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(_totalSupply)\\n      );\\n  }\\n\\n  function earned(address account) public view override returns (uint256) {\\n    return\\n      _balances[account]\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n        .div(1e18)\\n        .add(rewards[account]);\\n  }\\n\\n  function getRewardForDuration() external view override returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function stake(uint256 amount)\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(amount);\\n    stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n    emit Staked(msg.sender, amount);\\n  }\\n\\n  function withdraw(uint256 amount)\\n    public\\n    override\\n    nonReentrant\\n    updateReward(msg.sender)\\n  {\\n    require(amount > 0, \\\"Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n    stakingToken.safeTransfer(msg.sender, amount);\\n    emit Withdrawn(msg.sender, amount);\\n  }\\n\\n  function getReward() public override nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardsToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n\\n  function exit() external override {\\n    withdraw(_balances[msg.sender]);\\n    getReward();\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function notifyRewardAmount(uint256 reward)\\n    external\\n    override\\n    onlyOwner\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(rewardsDuration),\\n      \\\"Provided reward too high\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(reward);\\n  }\\n\\n  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      tokenAddress != address(stakingToken),\\n      \\\"Cannot withdraw the staking token\\\"\\n    );\\n    IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n    if (account != address(0)) {\\n      rewards[account] = earned(account);\\n      userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  event RewardAdded(uint256 reward);\\n  event Staked(address indexed user, uint256 amount);\\n  event Withdrawn(address indexed user, uint256 amount);\\n  event RewardPaid(address indexed user, uint256 reward);\\n  event RewardsDurationUpdated(uint256 newDuration);\\n  event Recovered(address token, uint256 amount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"contracts/core/interfaces/IStakingRewards.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\ninterface IStakingRewards {\\n  // Views\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function lastTimeRewardApplicable() external view returns (uint256);\\n\\n  function rewardPerToken() external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function getRewardForDuration() external view returns (uint256);\\n\\n  // Mutative\\n  function stake(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function getReward() external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256 reward) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/mocks/MockERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockERC20 is ERC20 {\\n  uint8 public __decimals = 18;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) ERC20(_name, _symbol) {\\n    __decimals = _decimals;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return __decimals;\\n  }\\n\\n  function mint(address to_, uint256 amount_) public {\\n    _mint(to_, amount_);\\n  }\\n\\n  function burn(address from_, uint256 amount_) public {\\n    _burn(from_, amount_);\\n  }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/core/tokens/XPop.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract XPop is\\n  Ownable,\\n  ERC20(\\\"Popcorn (Redeemable POP)\\\", \\\"xPOP\\\"),\\n  ERC20Burnable,\\n  ERC20Permit(\\\"Popcorn (Redeemable POP)\\\")\\n{\\n  uint256 private immutable _mintCap;\\n  uint256 private _totalMinted;\\n\\n  constructor(uint256 mintCap_) {\\n    require(mintCap_ > 0, \\\"Mint cap is 0\\\");\\n    _mintCap = mintCap_;\\n  }\\n\\n  function mint(address to, uint256 amount) public onlyOwner {\\n    _mint(to, amount);\\n  }\\n\\n  function totalMinted() public view returns (uint256) {\\n    return _totalMinted;\\n  }\\n\\n  function mintCap() public view returns (uint256) {\\n    return _mintCap;\\n  }\\n\\n  function _mint(address to, uint256 amount) internal override {\\n    require(_totalMinted + amount <= mintCap(), \\\"Mint cap exceeded\\\");\\n    _totalMinted += amount;\\n    super._mint(to, amount);\\n  }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "a930e0b3dd1a60049bd66df656211e64",
      "transactionHash": "0x6b65d24114bd3fc6809cbe01c876c837dc769a536c7775d2a5c09e488e3582e3",
      "args": [
        "0x4b061f806F7Fb6994E5724281F03B32b86a967Fc",
        "0x68397D77c9d7180D8EE3bAA1F1741CfC3647B988"
      ]
    },
    "decoded": {
      "from": "0x1a2D045380eE3Bff01a244882CefDb805Ade7267",
      "gasPrice": "2000000000",
      "gasLimit": "1363937",
      "to": null,
      "value": "0",
      "nonce": 11,
      "data": "0x60806040526000600455600060055562093a806006553480156200002257600080fd5b50604051620016da380380620016da833981016040819052620000459162000109565b620000596200005362000098565b6200009c565b60018055600280546001600160a81b0319166101006001600160a01b0394851602179055600380546001600160a01b0319169190921617905562000140565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b600080604083850312156200011c578182fd5b6200012783620000ec565b91506200013760208401620000ec565b90509250929050565b61158a80620001506000396000f3fe608060405234801561001057600080fd5b50600436106101ad5760003560e01c806380faa57d116100ee578063cc1a378f11610097578063df136d6511610071578063df136d65146102f7578063e9fad8ee146102ff578063ebe2b12b14610307578063f2fde38b1461030f576101ad565b8063cc1a378f146102d4578063cd3daf9d146102e7578063d1af0c7d146102ef576101ad565b80638da5cb5b116100c85780638da5cb5b146102b1578063a694fc3a146102b9578063c8f33c91146102cc576101ad565b806380faa57d146102835780638980f11f1461028b5780638b8763471461029e576101ad565b80633c6b16ab1161015b57806370a082311161013557806370a082311461024b578063715018a61461025e57806372f702f3146102665780637b0a47ee1461027b576101ad565b80633c6b16ab1461021b5780633d18b9121461022e5780635c975abb14610236576101ad565b80631c1f78eb1161018c5780631c1f78eb146101f65780632e1a7d4d146101fe578063386a952514610213576101ad565b80628cc262146101b25780630700037d146101db57806318160ddd146101ee575b600080fd5b6101c56101c0366004610fe7565b610322565b6040516101d2919061149b565b60405180910390f35b6101c56101e9366004610fe7565b6103a2565b6101c56103b4565b6101c56103bb565b61021161020c36600461104a565b6103d9565b005b6101c5610524565b61021161022936600461104a565b61052a565b610211610751565b61023e610858565b6040516101d291906110e7565b6101c5610259366004610fe7565b610861565b61021161087c565b61026e6108c7565b6040516101d29190611096565b6101c56108d6565b6101c56108dc565b610211610299366004611001565b6108f4565b6101c56102ac366004610fe7565b6109ba565b61026e6109cc565b6102116102c736600461104a565b6109db565b6101c5610b33565b6102116102e236600461104a565b610b39565b6101c5610bd9565b61026e610c27565b6101c5610c3b565b610211610c41565b6101c5610c62565b61021161031d366004610fe7565b610c68565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461039a919061039490670de0b6b3a76400009061038e9061036f90610369610bd9565b90610cd9565b6001600160a01b0388166000908152600c602052604090205490610cec565b90610cf8565b90610d04565b90505b919050565b600a6020526000908152604090205481565b600b545b90565b60006103d4600654600554610cec90919063ffffffff16565b905090565b600260015414156104055760405162461bcd60e51b81526004016103fc90611407565b60405180910390fd5b600260015533610413610bd9565b60085561041e6108dc565b6007556001600160a01b038116156104655761043981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116104855760405162461bcd60e51b81526004016103fc906112d0565b600b546104929083610cd9565b600b55336000908152600c60205260409020546104af9083610cd9565b336000818152600c60205260409020919091556003546104db916001600160a01b039091169084610d10565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610514919061149b565b60405180910390a2505060018055565b60065481565b610532610d98565b6001600160a01b03166105436109cc565b6001600160a01b0316146105695760405162461bcd60e51b81526004016103fc90611307565b6000610573610bd9565b60085561057e6108dc565b6007556001600160a01b038116156105c55761059981610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106105e4576006546105dc908390610cf8565b600555610627565b6004546000906105f49042610cd9565b9050600061060d60055483610cec90919063ffffffff16565b6006549091506106219061038e8684610d04565b60055550505b6002546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161010090046001600160a01b0316906370a0823190610676903090600401611096565b60206040518083038186803b15801561068e57600080fd5b505afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611062565b90506106dd60065482610cf890919063ffffffff16565b60055411156106fe5760405162461bcd60e51b81526004016103fc9061133c565b4260078190556006546107119190610d04565b6004556040517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9061074490859061149b565b60405180910390a1505050565b600260015414156107745760405162461bcd60e51b81526004016103fc90611407565b600260015533610782610bd9565b60085561078d6108dc565b6007556001600160a01b038116156107d4576107a881610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a6020526040902054801561085057336000818152600a6020526040812055600254610817916101009091046001600160a01b03169083610d10565b336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610514919061149b565b505060018055565b60025460ff1690565b6001600160a01b03166000908152600c602052604090205490565b610884610d98565b6001600160a01b03166108956109cc565b6001600160a01b0316146108bb5760405162461bcd60e51b81526004016103fc90611307565b6108c56000610d9c565b565b6003546001600160a01b031681565b60055481565b600060045442106108ef576004546103d4565b504290565b6108fc610d98565b6001600160a01b031661090d6109cc565b6001600160a01b0316146109335760405162461bcd60e51b81526004016103fc90611307565b6003546001600160a01b03838116911614156109615760405162461bcd60e51b81526004016103fc9061143e565b61097d61096c6109cc565b6001600160a01b0384169083610d10565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516109ae9291906110ce565b60405180910390a15050565b60096020526000908152604090205481565b6000546001600160a01b031690565b600260015414156109fe5760405162461bcd60e51b81526004016103fc90611407565b6002600155610a0b610858565b15610a285760405162461bcd60e51b81526004016103fc90611299565b33610a31610bd9565b600855610a3c6108dc565b6007556001600160a01b03811615610a8357610a5781610322565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610aa35760405162461bcd60e51b81526004016103fc90611205565b600b54610ab09083610d04565b600b55336000908152600c6020526040902054610acd9083610d04565b336000818152600c6020526040902091909155600354610afa916001600160a01b03909116903085610e04565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610514919061149b565b60075481565b610b41610d98565b6001600160a01b0316610b526109cc565b6001600160a01b031614610b785760405162461bcd60e51b81526004016103fc90611307565b6004544211610b995760405162461bcd60e51b81526004016103fc90611125565b60068190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d390610bce90839061149b565b60405180910390a150565b6000600b5460001415610bef57506008546103b8565b6103d4610c1e600b5461038e670de0b6b3a7640000610c18600554610c186007546103696108dc565b90610cec565b60085490610d04565b60025461010090046001600160a01b031681565b60085481565b336000908152600c6020526040902054610c5a906103d9565b6108c5610751565b60045481565b610c70610d98565b6001600160a01b0316610c816109cc565b6001600160a01b031614610ca75760405162461bcd60e51b81526004016103fc90611307565b6001600160a01b038116610ccd5760405162461bcd60e51b81526004016103fc906111a8565b610cd681610d9c565b50565b6000610ce582846114fb565b9392505050565b6000610ce582846114dc565b6000610ce582846114bc565b6000610ce582846114a4565b610d938363a9059cbb60e01b8484604051602401610d2f9291906110ce565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e2b565b505050565b3390565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e25846323b872dd60e01b858585604051602401610d2f939291906110aa565b50505050565b6000610e80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eba9092919063ffffffff16565b805190915015610d935780806020019051810190610e9e919061102a565b610d935760405162461bcd60e51b81526004016103fc906113aa565b6060610ec98484600085610ed1565b949350505050565b606082471015610ef35760405162461bcd60e51b81526004016103fc9061123c565b610efc85610f91565b610f185760405162461bcd60e51b81526004016103fc90611373565b600080866001600160a01b03168587604051610f34919061107a565b60006040518083038185875af1925050503d8060008114610f71576040519150601f19603f3d011682016040523d82523d6000602084013e610f76565b606091505b5091509150610f86828286610f97565b979650505050505050565b3b151590565b60608315610fa6575081610ce5565b825115610fb65782518084602001fd5b8160405162461bcd60e51b81526004016103fc91906110f2565b80356001600160a01b038116811461039d57600080fd5b600060208284031215610ff8578081fd5b610ce582610fd0565b60008060408385031215611013578081fd5b61101c83610fd0565b946020939093013593505050565b60006020828403121561103b578081fd5b81518015158114610ce5578182fd5b60006020828403121561105b578081fd5b5035919050565b600060208284031215611073578081fd5b5051919050565b6000825161108c818460208701611512565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152611111816040850160208701611512565b601f01601f19169190910160400192915050565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252600e908201527f43616e6e6f74207374616b652030000000000000000000000000000000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526011908201527f43616e6e6f742077697468647261772030000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526018908201527f50726f76696465642072657761726420746f6f20686967680000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526021908201527f43616e6e6f7420776974686472617720746865207374616b696e6720746f6b6560408201527f6e00000000000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b600082198211156114b7576114b761153e565b500190565b6000826114d757634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156114f6576114f661153e565b500290565b60008282101561150d5761150d61153e565b500390565b60005b8381101561152d578181015183820152602001611515565b83811115610e255750506000910152565b634e487b7160e01b600052601160045260246000fdfea264697066735822122024514ffbbea37ab62ec37df7251b63441e7a3cdde353f9b433840ea2cd1d379064736f6c634300080000330000000000000000000000004b061f806f7fb6994e5724281f03b32b86a967fc00000000000000000000000068397d77c9d7180d8ee3baa1f1741cfc3647b988",
      "r": "0x2b78307f33a3c64a6bf9e96afe05050c76fecd7debeaa346cd74c88fe63382bc",
      "s": "0x619fdbfa8bf922cd62dae68b79ebb468c330d25cef48934729ca47640725f9a8",
      "v": 44,
      "chainId": 4
    }
  }
}